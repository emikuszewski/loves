<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Cloud Foundry Meeting</title>
    <link>http://loves.cfapps.io/tags/spring/</link>
    <description>Recent content in Spring on Cloud Foundry Meeting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2016 Pivotal Software, Inc. All Rights Reserved. Sitemap</copyright>
    <lastBuildDate>Fri, 15 Apr 2016 11:28:20 -0400</lastBuildDate>
    <atom:link href="http://loves.cfapps.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lab 5: Spring Cloud Circuit Breaker</title>
      <link>http://loves.cfapps.io/2016/04/15/lab-5-spring-cloud-circuit-breaker/</link>
      <pubDate>Fri, 15 Apr 2016 11:28:20 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/04/15/lab-5-spring-cloud-circuit-breaker/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;In this workshop, you will learn how to apply the circuit breaker pattern in your Spring boot apps.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centers, and managed platforms such as Cloud Foundry.&lt;/p&gt;

&lt;p&gt;The big picture : Use Spring Cloud Services design patterns to build cloud Native applications&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-1.png&#34; alt=&#34;Cloud Native Spring Application Architecture&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Circuit Breaker Dashboard for Pivotal Cloud Foundry® (PCF) provides Spring applications with an implementation of the Circuit Breaker pattern. Cloud-native architectures are typically composed of multiple layers of distributed services. End-user requests may comprise multiple calls to these services, and if a lower-level service fails, the failure can cascade up to the end user and spread to other dependent services. Heavy traffic to a failing service can also make it difficult to repair. Using Circuit Breaker Dashboard, you can prevent failures from cascading and provide fallback behavior until a failing service is restored to normal operation.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java SDK 1.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Git from &lt;a href=&#34;https://mac.github.com/&#34;&gt;github.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud Foundry CLI for &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/installcf/install-go-cli.html#windows&#34;&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curl from &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pivotal Web Services Account.  Create a free trial account here &lt;a href=&#34;http://run.pivotal.io/&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maven for build (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In this workshop we are going to follow these steps to use the circuit-breaker in a Cloud Native Spring Boot app on Cloud foundry using the Spring Cloud Circuit Breaker Service.&lt;/p&gt;

&lt;p&gt;Learn how to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Config a Spring Cloud Circuit Breaker Service
- Use Circuit Breaker  (Hysterix) in a Spring Boot application
- Simulate a failure and watch the circuit breaker manage failures
- Restore the service and watch the circuit breaker restore back the circuit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When applied to a service, a circuit breaker watches for failing calls to the service. If failures reach a certain threshold, it “opens” the circuit and automatically redirects calls to the specified fallback mechanism. This gives the failing service time to recover.&lt;/p&gt;

&lt;p&gt;Desired the architecture of this Cloud Native Spring boot app is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-1.png&#34; alt=&#34;Circuit Breaker with Cloud Native Spring App&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;h5 id=&#34;get-the-traveler-app&#34;&gt;Get the traveler app&lt;/h5&gt;

&lt;p&gt;Clone the git repo which has a simple boilerplate Spring boot app built using Spring Initializer.&lt;/p&gt;

&lt;p&gt;The Spring Labs repo contains multiple apps, we are going to focus on traveler app in this exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/rjain-pivotal/pcf-workshop-spring-labs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;h5 id=&#34;login-into-pivotal-cloud-foundry&#34;&gt;Login into Pivotal Cloud Foundry&lt;/h5&gt;

&lt;p&gt;The students have userId&amp;rsquo;s (student1-student25) and the passwords will be distributed in the workshop.
Each student is assigned their own Organization (student1-org)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.pcf2.cloud.fe.pivotal.io --skip-ssl-validation
  Email: student1
  Password: ••••••••
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login to the App Console at &lt;a href=&#34;https://apps.pcf2.cloud.fe.pivotal.io&#34;&gt;https://apps.pcf2.cloud.fe.pivotal.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console.png&#34; alt=&#34;PCF App Console&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;

&lt;h5 id=&#34;configure-the-spring-cloud-circuit-breaker-instance-from-the-marketplace&#34;&gt;Configure the Spring Cloud Circuit Breaker Instance from the marketplace&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the PCF App Console, create a instance of the Registry Service from the marketplace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console-2.png&#34; alt=&#34;Marketplace Services&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the default plan.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the service instance as &amp;lsquo;studentXX-circuit-breaker-dashboard&amp;rsquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-2.png&#34; alt=&#34;Circuit Breaker&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This will create the studentXX-circuit-breaker-dashboard service instance. To view the configuration of this service by clicking manage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-3.png&#34; alt=&#34;Circuit Breaker&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-4&#34;&gt;Step 4&lt;/h3&gt;

&lt;h5 id=&#34;code-walk-through-traveler&#34;&gt;Code walk through (traveler)&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the code in the traveler app in the source repo (Step #1) using your favorite editor (Atom/Sublime/Eclipse/IntelliJ/STS)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;traveler/feign-agency/src/main/java/agency/AgencyApplication.java&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;To work with a Circuit Breaker Dashboard instance, your application must include the &lt;code&gt;@EnableCircuitBreaker&lt;/code&gt; annotation on a configuration class. This client application also using service registry to discover the Company service and Feign to build the interace for accessing the services&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

  import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;

  import org.springframework.cloud.netflix.feign.EnableFeignClients;

  @SpringBootApplication
  @EnableDiscoveryClient
  @RestController
  @EnableCircuitBreaker
  @EnableFeignClients
  public class AgencyApplication {
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;traveler/feign-agency/pom.xml&lt;/em&gt; file. By adding &lt;em&gt;spring-cloud-services-starter-circuit-breaker&lt;/em&gt; to the classpath this application is able to use the circuit breaker.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-feign&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;

  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.pivotal.spring.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-services-starter-service-registry&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;

  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.pivotal.spring.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-services-starter-circuit-breaker&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;traveler/feign-agency/src/main/java/agency/TravelAgent.java&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To apply a circuit breaker to a method, annotate the method with &lt;code&gt;@HystrixCommand&lt;/code&gt;, giving the annotation the name of a fallbackMethod.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@HystrixCommand(fallbackMethod = &amp;quot;getBackupGuide&amp;quot;)
public String getGuide() {
    return company.availableGuide();
}

String getBackupGuide() {
    return &amp;quot;None available! Your backup guide is: Cookie&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;getGuide()&lt;/code&gt; method uses a RestTemplate to obtain a guide name from another application called Company, which is registered with a Service Registry instance.&lt;/p&gt;

&lt;p&gt;The method thus relies on the Company application to return a response, and if the Company application fails to do so, calls to &lt;code&gt;getGuide()&lt;/code&gt; will fail. When the failures exceed the threshold, the breaker on &lt;code&gt;getGuide()&lt;/code&gt; will open the circuit.&lt;/p&gt;

&lt;p&gt;While the circuit is open, the breaker redirects calls to the annotated method, and they instead call the designated fallbackMethod. The fallback method must be in the same class and have the same method signature (i.e., have the same return type and accept the same parameters) as the annotated method.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more details, refer to the documentation of the Circuit Breaker configuration here (&lt;a href=&#34;https://docs.pivotal.io/spring-cloud-services/circuit-breaker/writing-client-applications.html&#34;&gt;https://docs.pivotal.io/spring-cloud-services/circuit-breaker/writing-client-applications.html&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;step-5&#34;&gt;Step 5&lt;/h3&gt;

&lt;h5 id=&#34;push-the-app-to-cloud-foundry&#34;&gt;Push the app to cloud Foundry&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change the manifest.yml file in the traveler/company to reflect the name of the app and the service-registry&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
memory: 512M
applications:
  - name: &amp;lt;studentXX&amp;gt;-company
    services:
      - &amp;lt;studentXX&amp;gt;-service-registry
    path: ./target/company-0.0.1-SNAPSHOT.jar
    env:
      SPRING_PROFILES_ACTIVE: dev
      CF_TARGET: https://api.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the manifest.yml file in the traveler/feign-agency to reflect the name of the app and the circuit-breaker and service-registry Services&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
instances: 1
memory: 512M
applications:
  - name:  &amp;lt;studentXX&amp;gt;-agency
    path: ./target/agency-0.0.1-SNAPSHOT.jar
    services:
      -  &amp;lt;studentXX&amp;gt;-service-registry
      -  &amp;lt;studentXX&amp;gt;-circuit-breaker-dashboard
    env:
      SPRING_PROFILES_ACTIVE: dev
      CF_TARGET: https://api.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app using maven in the parent traveler directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $cd traveler
  $mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the apps using scripts/deploy_mvn.sh or scripts/deploy_mvn.bat&lt;/p&gt;

&lt;p&gt;First check and change the service names in the script. If the script registry is already created don&amp;rsquo;t create a new one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #cf create-service p-service-registry standard &amp;lt;studentXX&amp;gt;-service-registry
  cf create-service p-circuit-breaker-dashboard standard &amp;lt;studentXX&amp;gt;-circuit-breaker-dashboard
  sleep 120
  pushd company &amp;amp;&amp;amp; cf push -p target/company-0.0.1-SNAPSHOT.jar
  popd; sleep 30
  pushd feign-agency &amp;amp;&amp;amp; cf push -p target/agency-0.0.1-SNAPSHOT.jar
  popd
  echo &amp;quot;&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;Done!&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, push using this scripts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $cd traveler
  $./scripts/deploy_mvn.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App&lt;/p&gt;

&lt;p&gt;First, Get the route to your app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // This is the agency app
  http://&amp;lt;studentXX&amp;gt;-agency.pcf2.cloud.fe.pivotal.io/

  // Note this is the company app
  http://&amp;lt;studentXX&amp;gt;-company.pcf2.cloud.fe.pivotal.io/available
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the Hysterix Dashboard from the App Console -&amp;gt; Manage Hysterix Service instance&lt;/p&gt;

&lt;p&gt;When service calls are succeeding, the circuit is closed, and the dashboard graph shows the rate of calls per second and successful calls per 10 seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-4.png&#34; alt=&#34;Circuit Breaker Open&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-6&#34;&gt;Step 6&lt;/h3&gt;

&lt;h5 id=&#34;shut-down-the-company-service&#34;&gt;Shut down the Company Service&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If the Company application becomes unavailable or if the Agency application cannot access it, calls to getGuide() will fail.&lt;/p&gt;

&lt;p&gt;When successive failures build up to the threshold, Hystrix will open the circuit, and subsequent calls will be redirected to the getBackupGuide() method until the Company application is accessible again and the circuit is closed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cf stop  &amp;lt;studentXX&amp;gt;-company
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now check the app status, the agency app will fall back to the backup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http:// &amp;lt;studentXX&amp;gt;-agency.pcf2.cloud.fe.pivotal.io/

Your guide will be: None available! Your backup guide is: Cookie
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the Hysterix Dashboard from the App Console -&amp;gt; Manage Hysterix Service instance&lt;/p&gt;

&lt;p&gt;When calls begin to fail, the graph shows the rate of failed calls in red.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-5.png&#34; alt=&#34;Circuit Breaker Open&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Load the circuit&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while true; do curl http://&amp;lt;studentXX&amp;gt;-agency.pcf2.cloud.fe.pivotal.io/; done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When failures exceed the configured threshold (the default is 20 failures in 5 seconds), the breaker opens the circuit.&lt;/p&gt;

&lt;p&gt;The dashboard shows the rate of short-circuited calls—calls which are going straight to the fallback method—in blue.&lt;/p&gt;

&lt;p&gt;The application is still allowing calls to the failing method at a rate of 1 every 5 seconds, as indicated in red; this is necessary to determine if calls are succeeding again and if the circuit can be closed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-6.png&#34; alt=&#34;Circuit Breaker Open&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Lab 4: Spring Cloud Registry Server</title>
      <link>http://loves.cfapps.io/2016/04/13/lab-4-spring-cloud-registry-server/</link>
      <pubDate>Wed, 13 Apr 2016 00:19:42 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/04/13/lab-4-spring-cloud-registry-server/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;To create a Spring boot application using Spring Cloud Registry Server and deploy it on the Cloud Foundry Platform.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centers, and managed platforms such as Cloud Foundry.&lt;/p&gt;

&lt;p&gt;The big picture : Use Spring Cloud Services design patterns to build cloud Native applications&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-1.png&#34; alt=&#34;Cloud Native Spring Application Architecture&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java SDK 1.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Git from &lt;a href=&#34;https://mac.github.com/&#34;&gt;github.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud Foundry CLI for &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/installcf/install-go-cli.html#windows&#34;&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curl from &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pivotal Web Services Account.  Create a free trial account here &lt;a href=&#34;http://run.pivotal.io/&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maven for build (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In this workshop we are going to follow these steps to build our first Cloud Native Spring Boot app on Cloud foundry using the Spring Cloud Registry Server.&lt;/p&gt;

&lt;p&gt;Learn how to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Config a Spring Cloud Service Registry
- Use Service Registry (Eureka) in a Spring Boot application
- Register services (fortune-service) with Service Registry (Eureka)
- Discover and Consume services (greeting-feign) with Service Registry (Eureka)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Desired the architecture of this Cloud Native Spring boot app is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-3.png&#34; alt=&#34;Registry Server with Cloud Native Spring App&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-1-register-a-service&#34;&gt;PART 1: Register a service.&lt;/h2&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;h5 id=&#34;get-the-fortune-service-app&#34;&gt;Get the fortune-service app&lt;/h5&gt;

&lt;p&gt;Clone the git repo which has a simple boilerplate Spring boot app built using Spring Initializer.&lt;/p&gt;

&lt;p&gt;The Spring Labs repo contains multiple apps, we are going to focus on fortune-service app in this exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/rjain-pivotal/pcf-workshop-spring-labs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;h5 id=&#34;login-into-pivotal-cloud-foundry&#34;&gt;Login into Pivotal Cloud Foundry&lt;/h5&gt;

&lt;p&gt;The students have userId&amp;rsquo;s (student1-student25) and the passwords will be distributed in the workshop.
Each student is assigned their own Organization (student1-org)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.pcf2.cloud.fe.pivotal.io --skip-ssl-validation
  Email: student1
  Password: ••••••••
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login to the App Console at &lt;a href=&#34;https://apps.pcf2.cloud.fe.pivotal.io&#34;&gt;https://apps.pcf2.cloud.fe.pivotal.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console.png&#34; alt=&#34;PCF App Console&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;

&lt;h5 id=&#34;configure-the-spring-cloud-registry-service-instance-from-the-marketplace&#34;&gt;Configure the Spring Cloud Registry Service Instance from the marketplace&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the PCF App Console, create a instance of the Registry Service from the marketplace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console-2.png&#34; alt=&#34;Marketplace Services&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the default plan.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the service instance as &amp;lsquo;studentXX-registry-service&amp;rsquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-service-1.png&#34; alt=&#34;Registry Service&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This will create the studentXX-registry-service service instance. To view the configuration of this service by clicking manage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-service-2.png&#34; alt=&#34;Registry Service&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-4&#34;&gt;Step 4&lt;/h3&gt;

&lt;h5 id=&#34;code-walk-through-fortune-service&#34;&gt;Code walk through (fortune-service)&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the code in the fortune-service app in the source repo (Step #1) using your favorite editor (Atom/Sublime/Eclipse/IntelliJ/STS)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;fortune-service/src/main/resources/bootstrap.yml&lt;/em&gt; file. The name of this app is fortune-service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  server:
   port: 8787
  spring:
   application:
     name: fortune-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;spring.application.name is the name the application will use when registering with Eureka.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;fortune-service/pom.xml&lt;/em&gt; file. By adding &lt;em&gt;spring-cloud-services-starter-service-registry&lt;/em&gt; to the classpath this application is eligible to register and discover services with the service-registry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.pivotal.spring.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-services-starter-service-registry&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;fortune-service/src/main/java/io/pivotal/FortuneServiceApplication.java&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;@EnableDiscoveryClient.&lt;/code&gt; This enables a discovery client that registers the fortune-service with the service-registry application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDiscoveryClient
public class FortuneServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(FortuneServiceApplication.class, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-5&#34;&gt;Step 5&lt;/h3&gt;

&lt;h5 id=&#34;push-the-app-to-cloud-foundry&#34;&gt;Push the app to cloud Foundry&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change the manifest.yml file in the fortune-service/ to reflect the name of the app and the service-registry&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
applications:
- name: &amp;lt;studentXXX&amp;gt;-fortune-service
  memory: 512MB
  instances: 1
  host: &amp;lt;studentXXX&amp;gt;-fortune-service
  path: ./target/fortune-service-0.0.1-SNAPSHOT.jar
  services:
  - &amp;lt;studentXXX&amp;gt;-service-registry
  env:
    CF_TARGET: https://api.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app using maven&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the app using cf cli&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cf push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App
Get the route to your app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  http://fortune-service-decompressive-retrenchment.pcf2.cloud.fe.pivotal.io/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-6&#34;&gt;Step 6&lt;/h3&gt;

&lt;h5 id=&#34;verify-the-app-is-registered-in-the-service-registry&#34;&gt;Verify the App is registered in the Service Registry&lt;/h5&gt;

&lt;p&gt;After the a few moments, check the service-registry dashboard. Confirm the fortune-service is registered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-service-3.png&#34; alt=&#34;Service Registry&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-2-consume-a-service&#34;&gt;PART 2: Consume a service.&lt;/h2&gt;

&lt;h3 id=&#34;step-7&#34;&gt;Step 7&lt;/h3&gt;

&lt;h5 id=&#34;build-restful-interface-for-consuming-services-using-netflix-feign&#34;&gt;Build Restful interface for consuming services using Netflix Feign&lt;/h5&gt;

&lt;p&gt;You have the greeting-service app in the cloned repo (Step 1) which has the client to consume service.&lt;/p&gt;

&lt;p&gt;Lets walk through the code&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the greeting-feign/pom.xml file , with the &lt;em&gt;spring-cloud-starter-feign&lt;/em&gt;  dependency,  this application is eligible to discover services with the service-registry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-feign&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the &lt;em&gt;GreetingFeignApplication.java&lt;/em&gt; includes the @EnableDiscoveryClient annotation on a configuration class. To have Feign client interfaces automatically configured, it must also use the @EnableFeignClients annotation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @SpringBootApplication
  @EnableDiscoveryClient
  @EnableFeignClients
  public class GreetingFeignApplication {

      public static void main(String[] args) {
          SpringApplication.run(GreetingFeignApplication.class, args);
      }

  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application’s actual URL; the Registry will take care of finding and routing to the service.&lt;/p&gt;

&lt;p&gt;Pivotal Cloud Foundry installation is configured to only allow HTTPS traffic, you must specify the https:// scheme in the base URI used by your client application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @FeignClient(&amp;quot;https://fortune-service&amp;quot;)
  public interface FortuneServiceClient {

     @RequestMapping(method = RequestMethod.GET, value = &amp;quot;/&amp;quot;)
     String getFortune();
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-8&#34;&gt;Step 8&lt;/h3&gt;

&lt;h5 id=&#34;build-and-push-the-consuming-app&#34;&gt;Build and Push the Consuming app&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Next, update the manifest.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
applications:
- name: greeting-feign
  memory: 512MB
  instances: 1
  host: &amp;lt;studentXXX&amp;gt;-greeting-feign
  path: ./target/greeting-feign-0.0.1-SNAPSHOT.jar
  services:
  - &amp;lt;studentXX&amp;gt;-service-registry
  env:
    CF_TARGET: https://api.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app using maven&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the app using cf cli&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cf push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App&lt;/p&gt;

&lt;p&gt;Get the route to your app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  http://studentXXX-greeting-feign.pcf2.cloud.fe.pivotal.io/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-example.png&#34; alt=&#34;Service Registry Example&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-9&#34;&gt;Step 9&lt;/h3&gt;

&lt;h5 id=&#34;verify-the-app-is-registered-in-the-service-registry-1&#34;&gt;Verify the App is registered in the Service Registry&lt;/h5&gt;

&lt;p&gt;This app is also registered as a service in the Service registry. Check the service-registry dashboard. Confirm the fortune-service and greeting-feign is registered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-service-4.png&#34; alt=&#34;Service Registry&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 3: Spring Cloud Config Server</title>
      <link>http://loves.cfapps.io/2016/04/11/lab-3-spring-cloud-config-server/</link>
      <pubDate>Mon, 11 Apr 2016 23:37:14 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/04/11/lab-3-spring-cloud-config-server/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;To create a Spring boot application using Spring Cloud Config Server to store and fetch configuration information and deploy it on the Pivotal Cloud Foundry Platform.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centers, and managed platforms such as Cloud Foundry.&lt;/p&gt;

&lt;p&gt;The big picture : Use Spring Cloud Services design patterns to build cloud Native applications&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-1.png&#34; alt=&#34;Cloud Native Spring Application Architecture&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java SDK 1.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Git from &lt;a href=&#34;https://mac.github.com/&#34;&gt;github.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud Foundry CLI for &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/installcf/install-go-cli.html#windows&#34;&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curl from &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pivotal Web Services Account.  Create a free trial account here &lt;a href=&#34;http://run.pivotal.io/&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maven for build (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In this workshop we are going to follow these steps to build our first Cloud Native Spring Boot app on Cloud foundry using the Spring Cloud Config Server.&lt;/p&gt;

&lt;p&gt;Learn how to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Set up a Git repository to hold configuration data
- Configure Spring Cloud Config server (config-server) on Pivotal Cloud Foundry with a Git backend
- Set up a client (greeting-config) to pull configuration from the config-server
- Use @ConfigurationProperties to capture configuration changes (greeting-config)
- Use @RefreshScope to capture configuration changes (greeting-config)
- Use Cloud Bus to notify applications (greeting-config) to refresh configuration at scale
- Config a Spring Cloud Service Registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Desired the architecture of this Cloud Native Spring boot app is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-2.png&#34; alt=&#34;Config Server with Cloud Native Spring App&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;h5 id=&#34;get-the-greeting-config-app&#34;&gt;Get the greeting-config app&lt;/h5&gt;

&lt;p&gt;Clone the git repo which has a simple boilerplate Spring boot app built using Spring Initializer.&lt;/p&gt;

&lt;p&gt;The Spring Labs repo contains multiple apps, we are going to focus on greeting-config app in this exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/rjain-pivotal/pcf-workshop-spring-labs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;h5 id=&#34;login-into-pivotal-cloud-foundry&#34;&gt;Login into Pivotal Cloud Foundry&lt;/h5&gt;

&lt;p&gt;The students have userId&amp;rsquo;s (student1-student25) and the passwords will be distributed in the workshop.
Each student is assigned their own Organization (student1-org)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.pcf2.cloud.fe.pivotal.io --skip-ssl-validation
  Email: student1
  Password: ••••••••
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login to the App Console at &lt;a href=&#34;https://apps.pcf2.cloud.fe.pivotal.io&#34;&gt;https://apps.pcf2.cloud.fe.pivotal.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console.png&#34; alt=&#34;PCF App Console&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;

&lt;h5 id=&#34;set-the-config-data&#34;&gt;Set the config data&lt;/h5&gt;

&lt;p&gt;The greeting-config app uses the Spring Cloud Services Config Server to read config data.&lt;/p&gt;

&lt;p&gt;Fork the repo (&lt;a href=&#34;http://www.github.com/rjain-pivotal/workshop-app-config&#34;&gt;http://www.github.com/rjain-pivotal/workshop-app-config&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/config-server-fork.png&#34; alt=&#34;Fork&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;You can make changes to the application config files in the forked repo at &lt;a href=&#34;http://github.com/your-github-account/workshop-app-config&#34;&gt;http://github.com/your-github-account/workshop-app-config&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you want to make local changes and commit to the repo, then clone the git repo which has the config properties which are read by the greeting-config&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$git clone https://github.com/your-github-account/workshop-app-config.git
$cd workshop-app-config/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this repo you have the following config files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/git-1.png&#34; alt=&#34;Git Config Server Files&#34; style=&#34;width: 200px;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The config server serves the configuration request using the following path formats, where the application name is set in the application.yml for the client application, profile and label are set as environment variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/{application}/{profile}[/{label}]
/{application}-{profile}.yml
/{label}/{application}-{profile}.yml
/{application}-{profile}.properties
/{label}/{application}-{profile}.Properties
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details on the Config Server config files refer to the documentation (&lt;a href=&#34;http://docs.pivotal.io/spring-cloud-services/config-server/server.html&#34;&gt;http://docs.pivotal.io/spring-cloud-services/config-server/server.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;You could also have multiple branches in your Git repo, and in the Config Service instance, you can configure which branch to read the config information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;master
------
https://github.com/myorg/configurations
|- myapp.yml
|- myapp-development.yml
|- myapp-production.yml

tag v1.0.0
----------
https://github.com/myorg/configurations
|- myapp.yml
|- myapp-development.yml
|- myapp-production.yml

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4&#34;&gt;Step 4&lt;/h3&gt;

&lt;h5 id=&#34;configure-the-spring-cloud-config-service-instance-from-the-marketplace&#34;&gt;Configure the Spring Cloud Config Service Instance from the marketplace&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;In the PCF App Console, create a instance of the Config Server service from the marketplace.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console-1.png&#34; alt=&#34;Marketplace Services&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the default plan.&lt;/li&gt;
&lt;li&gt;Name the service instance as &amp;lsquo;studentXX-config-service&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-config-service-1.png&#34; alt=&#34;Config Server&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This will create the studentXX-config-service service instance. Next configure this service by clicking manage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-config-service-2.png&#34; alt=&#34;Config Server&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The Git repository URL is the URL of your cloned git repo in Step 3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/rjain-pivotal//student1-workshop-app-config.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using defaults for the rest, hence leave them blank.
For detailed documentation on the other configuration items, refer to the product documentation.
&lt;a href=&#34;http://docs.pivotal.io/spring-cloud-services/config-server/creating-an-instance.html&#34;&gt;http://docs.pivotal.io/spring-cloud-services/config-server/creating-an-instance.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-5&#34;&gt;Step 5&lt;/h3&gt;

&lt;h5 id=&#34;code-walk-through-greeting-config&#34;&gt;Code walk through (greeting-config)&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the code in the greeting-config app in the source repo (Step #1) using your favorite editor (Atom/Sublime/Eclipse/IntelliJ/STS)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;greeting-service&lt;/p&gt;

&lt;p&gt;In GreetingProperties.java, @ConfigurationProperties annotation allows for reading of configuration values. Configuration keys are a combination of the prefix and the field names. In this case, there is one field (displayFortune). Therefore greeting.displayFortune is used to turn the display of fortunes on/off. Remaining code is typical getter/setters for the fields.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @ConfigurationProperties(prefix=&amp;quot;greeting&amp;quot;)
  public class GreetingProperties {

    private boolean displayFortune;

    public boolean isDisplayFortune() {
        return displayFortune;
    }

    public void setDisplayFortune(boolean displayFortune) {
        this.displayFortune = displayFortune;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;greetingProperties.isDisplayFortune() is used to turn the display of fortunes on/off. There are times when you want to turn features on/off on demand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @EnableConfigurationProperties(GreetingProperties.class)
  public class GreetingController {

    Logger logger = LoggerFactory
            .getLogger(GreetingController.class);


    @Autowired
    GreetingProperties greetingProperties;

    @Autowired
    FortuneService fortuneService;

    @RequestMapping(&amp;quot;/&amp;quot;)
    String getGreeting(Model model){

        logger.debug(&amp;quot;Adding greeting&amp;quot;);
        model.addAttribute(&amp;quot;msg&amp;quot;, &amp;quot;Greetings!!!&amp;quot;);

        if(greetingProperties.isDisplayFortune()){
            logger.debug(&amp;quot;Adding fortune&amp;quot;);
            model.addAttribute(&amp;quot;fortune&amp;quot;, fortuneService.getFortune());
        }

        //resolves to the greeting.vm velocity template
        return &amp;quot;greeting&amp;quot;;
    }

  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;quote-service&lt;/p&gt;

&lt;p&gt;QuoteService uses the @RefreshScope annotation. Beans with the @RefreshScope annotation will be recreated when refreshing configuration. The @Value annotation allows for injecting the value of the quoteServiceURL configuration parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @Service
  @RefreshScope
  public class QuoteService {
    Logger logger = LoggerFactory
            .getLogger(QuoteController.class);

    @Value(&amp;quot;${quoteServiceURL}&amp;quot;)
    private String quoteServiceURL;

    public String getQuoteServiceURI() {
        return quoteServiceURL;
    }

    public Quote getQuote(){
        logger.info(&amp;quot;quoteServiceURL: {}&amp;quot;, quoteServiceURL);
        RestTemplate restTemplate = new RestTemplate();
        Quote quote = restTemplate.getForObject(
                quoteServiceURL, Quote.class);
        return quote;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;greeting-config.yml&lt;/p&gt;

&lt;p&gt;In the app-config repo in the Github, review the greeting-config.yml file, which has the displayFortune turned on and the quoteService point to an existing URL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  security:
    basic:
      enabled: false

  management:
    security:
      enabled: false

  logging:
    level:
      io:
        pivotal: DEBUG

  greeting:
    displayFortune: true # &amp;lt;----Change to true

  quoteServiceURL: http://quote-service-dev.cfapps.io/quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-6&#34;&gt;Step 6&lt;/h3&gt;

&lt;h5 id=&#34;push-the-app&#34;&gt;Push the app&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change the manifest.yml file in the greeting-config/ to reflect the name of the app and the config-service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
applications:
- name: &amp;lt;studentXXX&amp;gt;-greeting-config
  memory: 512M
  buildpack: https://github.com/cloudfoundry/java-buildpack
  instances: 1
  host: &amp;lt;studentXXX&amp;gt;-greeting-config
  path: target/greeting-config-0.0.1-SNAPSHOT.jar
  services:
    - &amp;lt;studentXXX&amp;gt;-config-service
  env:
    SPRING_PROFILES_ACTIVE: dev
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app using maven&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the app using cf cli&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cf push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/
  http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/random-quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-7&#34;&gt;Step 7&lt;/h3&gt;

&lt;h5 id=&#34;change-the-property-and-curl-to-refreshscope&#34;&gt;Change the property and curl to RefreshScope&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the app-config repo, edit the greeting-config.yml file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  greeting:
    displayFortune: false # &amp;lt;----Change to true

  quoteServiceURL: http://quote-service-qa.cfapps.io/quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Force refresh the beans&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  curl -X POST http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/refresh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will output the properties which changed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [&amp;quot;quoteServiceURL&amp;quot;,&amp;quot;greeting.displayFortune&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App&lt;/p&gt;

&lt;p&gt;You will see the Greetings doesn&amp;rsquo;t have any fortune and the random-quote is from qa service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/
http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/random-quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-8&#34;&gt;Step 8&lt;/h3&gt;

&lt;h5 id=&#34;change-the-profile-and-push&#34;&gt;Change the profile and Push&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Next, update the manifest.yml to point to the SPRING_PROFILES_ACTIVE to qa&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
applications:
- name: &amp;lt;studentXXX&amp;gt;-greeting-config
  memory: 512M
  buildpack: https://github.com/cloudfoundry/java-buildpack
  instances: 1
  host: &amp;lt;studentXXX&amp;gt;-greeting-config
  path: target/greeting-config-0.0.1-SNAPSHOT.jar
  services:
    - &amp;lt;studentXXX&amp;gt;-config-service
  env:
    SPRING_PROFILES_ACTIVE: qa
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the app using cf cli&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cf push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now the properties will be served by app-config/greeting-config-qa.yml&lt;/p&gt;

&lt;p&gt;You can verify by opening the two URLs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/
http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/random-quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-9&#34;&gt;Step 9&lt;/h3&gt;

&lt;h5 id=&#34;refreshing-application-configuration-at-scale-with-cloud-bus&#34;&gt;Refreshing Application Configuration at Scale with Cloud Bus&lt;/h5&gt;

&lt;p&gt;When running several instances of your application, this poses several problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Refreshing each individual instance is time consuming and too much overhead&lt;/li&gt;
&lt;li&gt;When running on Cloud Foundry you don’t have control over which instances you hit when sending the POST request due to load balancing provided by the router&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spring Cloud Bus addresses the issues listed above by providing a single endpoint to refresh all application instances via a pub/sub notification.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a RabbitMQ service instance, bind it to greeting-config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ cf create-service p-rabbitmq standard cloud-bus
  $ cf bind-service &amp;lt;studentXXX&amp;gt;-greeting-config cloud-bus
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the dependency to the pom.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-bus-amqp&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app and push 3 app instances&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $mvn clean package
  $cf push -i 3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the app-config/greeting-config.yml and refresh all the app instances using Cloud Bus&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  curl -X POST http://&amp;lt;studentXXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/bus/refresh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify by opening the two URLs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://&amp;lt;studentXXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/
http://&amp;lt;studentXXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/random-quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-10&#34;&gt;Step 10&lt;/h3&gt;

&lt;h5 id=&#34;spring-actuator-endpoints&#34;&gt;Spring Actuator Endpoints&lt;/h5&gt;

&lt;p&gt;Check the Actuator Endpoints&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/beans&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumps all of the beans in the Spring context.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/autoconfig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumps all of the auto-configuration performed as part of application bootstrapping.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/configprops&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Displays a collated list of all @ConfigurationProperties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/env&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumps the application’s shell environment as well as all Java system properties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/mappings&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumps all URI request mappings and the controller methods to which they are mapped.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/dump&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Performs a thread dump.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/trace&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>