<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloudfoundry on Cloud Foundry Meeting</title>
    <link>http://loves.cfapps.io/tags/cloudfoundry/</link>
    <description>Recent content in Cloudfoundry on Cloud Foundry Meeting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2016 Pivotal Software, Inc. All Rights Reserved. Sitemap</copyright>
    <lastBuildDate>Tue, 15 Mar 2016 14:54:11 -0400</lastBuildDate>
    <atom:link href="http://loves.cfapps.io/tags/cloudfoundry/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lab 1: Build and Deploy Apps on PCF</title>
      <link>http://loves.cfapps.io/2016/03/15/lab-1-build-and-deploy-apps-on-pcf/</link>
      <pubDate>Tue, 15 Mar 2016 14:54:11 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/03/15/lab-1-build-and-deploy-apps-on-pcf/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;To deploy and configure a microservice and UI, leverage the platform for monitoring &amp;amp; management of the microservice, and do a blue green deployment with zero downtime.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java SDK 1.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Git from &lt;a href=&#34;https://mac.github.com/&#34;&gt;github.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud Foundry CLI for &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/installcf/install-go-cli.html#windows&#34;&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curl from &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use Workshop PCF Env or Pivotal Web Services Account.  Create a free trial account here &lt;a href=&#34;http://run.pivotal.io/&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maven for build (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In this workshop we are going to follow these steps to deploy apps on Cloud foundry and manage the lifecycle of the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/devops-cf.png&#34; alt=&#34;DevOps on CF&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Learn how to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Get a Spring boot app and deploy it to Pivotal Cloud foundry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The instructions in this document are for Mac/Linux based CLI/Shell. If you are using Windows, you may need to adjust your slashes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-1-introduction-to-cf-push-an-app&#34;&gt;PART 1: Introduction to CF, Push an App.&lt;/h2&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;h5 id=&#34;get-the-cities-app&#34;&gt;Get the cities app&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Fork and Clone &lt;a href=&#34;https://github.com/Pivotal-Field-Engineering/pcf-workspace-devops/&#34;&gt;PCF Workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review the &lt;a href=&#34;https://github.com/Pivotal-Field-Engineering/pcf-workspace-devops/tree/master&#34;&gt;cities&lt;/a&gt; application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;h5 id=&#34;build-the-app&#34;&gt;Build the app&lt;/h5&gt;

&lt;p&gt;By this point, you should have cloned (or forked, or downloaded) the &lt;a href=&#34;https://github.com/Pivotal-Field-Engineering/pcf-workspace-devops/&#34;&gt;workspace repo&lt;/a&gt;.  Now you will build the project and deploy it to Cloud Foundry.&lt;/p&gt;

&lt;p&gt;For Linux/Mac:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
cd pcf-workspace-devops
./gradlew clean build

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd pcf-workspace-devops
gradlew.bat clean build
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;

&lt;h5 id=&#34;login-into-pivotal-cloud-foundry&#34;&gt;Login into Pivotal Cloud Foundry&lt;/h5&gt;

&lt;p&gt;The students have userId&amp;rsquo;s (student1-student25) and the passwords will be distributed in the workshop.
Each student is assigned an userId within their own organization (student1-org). Please refer to the handout you have been given.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.pcf2.cloud.fe.pivotal.io --skip-ssl-validation
  Email: student1
  Password: ••••••••
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login to the App Console at &lt;a href=&#34;https://apps.pcf2.cloud.fe.pivotal.io&#34;&gt;https://apps.pcf2.cloud.fe.pivotal.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console.png&#34; alt=&#34;PCF App Console&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-4&#34;&gt;Step 4&lt;/h3&gt;

&lt;h5 id=&#34;push-the-app&#34;&gt;Push the app&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Push the cities-hello, put your initials in the app name so we don&amp;rsquo;t get conflicts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd cities-hello
$ cf push &amp;lt;studentXX&amp;gt;-cities-hello
// This will give an output which is similar to this
requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: cities-hello-lactiferous-unanswerableness.pcf2.cloud.fe.pivotal.io
last uploaded: Mon Jun 15 14:53:10 UTC 2015
stack: cflinuxfs2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the app url&lt;/p&gt;

&lt;p&gt;When you push the apps, it will give the url route to the app.
&lt;img src=&#34;http://loves.cfapps.io/images/welcome.png&#34; alt=&#34;Welcome to PCF Workshop&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you haven&amp;rsquo;t already it is a good time to walk through the AppsManager:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://apps.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;recap-part-1&#34;&gt;Recap: Part 1&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloud Foundry Haiku &lt;/br&gt;
  Here is my source code &lt;/br&gt;
  Run it on the cloud for me &lt;/br&gt;
  I do not care how&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;discussion-part-1&#34;&gt;Discussion: Part 1&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;How do you push an app to the cloud today?&lt;/li&gt;
&lt;li&gt;How does the cloud platform understand which runtime to use to run the app?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-2-push-bind-monitor-scale&#34;&gt;PART 2: Push/Bind/Monitor/Scale&lt;/h2&gt;

&lt;p&gt;The cities-service app requires a database service to store and fetch cities info.&lt;/p&gt;

&lt;h3 id=&#34;step-5&#34;&gt;Step 5&lt;/h3&gt;

&lt;h5 id=&#34;create-a-database-from-marketplace&#34;&gt;Create a Database from Marketplace&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Review the docs on Services:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html&#34;&gt;Managing Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a mysql service, name it as &lt;code&gt;&amp;lt;YOUR INITIALS&amp;gt;-cities-db&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can create the service from the &lt;code&gt;cli&lt;/code&gt; or launch the App Manager-&amp;gt; Select the Development Space &lt;a href=&#34;https://apps.pcf2.cloud.fe.pivotal.io&#34;&gt;https://apps.pcf2.cloud.fe.pivotal.io&lt;/a&gt; and login.&lt;/p&gt;

&lt;p&gt;Navigate to the marketplace and see the available services. Here you will create the service using the CLI.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf marketplace // check if mysql service is available
$ cf create-service p-mysql 100mb-dev &amp;lt;studentXX&amp;gt;-cities-db
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Launch the DB console via the &lt;code&gt;Manage&lt;/code&gt; link in the App Manager.  Note the database is empty.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-6&#34;&gt;Step 6&lt;/h3&gt;

&lt;h5 id=&#34;push-the-app-1&#34;&gt;Push the App&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do a cf push on cities-service. Notice that the push will fail. In the next step you can learn why.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ../cities-service
$ cf push &amp;lt;studentXX&amp;gt;-cities-service -i 1 -m 512M -p build/libs/cities-service.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the logs to learn more about why the application is not starting
You can look at the recent logs from the cli or open up the App Console and view the log files for the app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf logs &amp;lt;studentXX&amp;gt;-cities-service --recent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console-log.png&#34; alt=&#34;Logs for the App&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-7&#34;&gt;Step 7&lt;/h3&gt;

&lt;h5 id=&#34;manually-binding-the-service-instance&#34;&gt;Manually Binding the Service Instance&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Review the docs on &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/devguide/services/bind-service.html&#34;&gt;Binding a Service Instance&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bind the mysql instance &lt;code&gt;&amp;lt;YOUR INITIALS&amp;gt;-cities-db&lt;/code&gt; to your app cities-service
You can bind from the App Manager or from the &lt;code&gt;cli&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf bind-service &amp;lt;studentXX&amp;gt;-cities-service &amp;lt;studentXX&amp;gt;-cities-db
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart your cities-service application to inject the new database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf restart &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the application is now running.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the Env variables to see if the service is bound.
You can do it from App Manager or from the &lt;code&gt;cli&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf env &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the MySQL database to see that it now contains data using MySQL Workbench or a similar tool.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a. This app is an Spring Cloud app which uses Spring Cloud Configuration to bind to a database service provided by the cloud platform.&lt;/p&gt;

&lt;p&gt;b. Difference between app &lt;code&gt;restage&lt;/code&gt; and &lt;code&gt;restart&lt;/code&gt;. An app &lt;code&gt;restage&lt;/code&gt; will stop your application, run the application bits through the staging process to create a new droplet, and then start the new droplet.  &lt;code&gt;restart&lt;/code&gt; will simply stop your application and start it with the existing droplet.  You typically &lt;code&gt;restart&lt;/code&gt; when you need your application&amp;rsquo;s&amp;rsquo; environment refreshed and you typically &lt;code&gt;restage&lt;/code&gt; when you need/want the &lt;code&gt;buildpack&lt;/code&gt; to run without updating the application source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-8&#34;&gt;Step 8&lt;/h3&gt;

&lt;h5 id=&#34;binding-services-via-the-manifest&#34;&gt;Binding Services via the Manifest&lt;/h5&gt;

&lt;p&gt;Next, lets push the cities-service app with a manifest to help automate deployment.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Review the documentation: &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/manifest.html&#34;&gt;http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/manifest.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit the application manifest  &lt;code&gt;manifest.service&lt;/code&gt; in your &lt;code&gt;cities-service&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nano manifest.service
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the name of the app, the amount of memory, the number of instances, and the path to the .jar file.
*Be sure to name your application &amp;lsquo;&lt;studentXX&gt;-cities-service&amp;rsquo; *&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the services binding &lt;code&gt;&amp;lt;YOUR INITIALS&amp;gt;-cities-db&lt;/code&gt; to your deployment manifest for cities-service .&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, manually unbind the service and re-push your app using the manifest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf unbind-service &amp;lt;studentXX&amp;gt;-cities-service &amp;lt;studentXX&amp;gt;-cities-db
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test your manifest by re-pushing your app with no parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf push -f manifest.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that using a manifest, you have moved the command line parameters (number of instances, memory, etc) into the manifest.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify you can access your application via a curl request:
You will have to get the route to your app&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   // This will list your apps and the last column is the route.
   $cf apps
      url: cities-hello-postpericardial-nonsubtlety.pcf2.cloud.fe.pivotal.io  
      $ curl -i http://cities-hello-postpericardial-nonsubtlety.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We must be able to access your application at  &lt;a href=&#34;http://cities-hello-postpericardial-nonsubtlety.pcf2.cloud.fe.pivotal.io&#34;&gt;http://cities-hello-postpericardial-nonsubtlety.pcf2.cloud.fe.pivotal.io&lt;/a&gt; for the next steps to work properly.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default manifest file for an app is &lt;code&gt;manifest.yml&lt;/code&gt; and it if is present, it is automatically picked without specifying the manifest file option.
In this exercise we have used a different naming convention.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-9&#34;&gt;Step 9&lt;/h3&gt;

&lt;h5 id=&#34;health-logging-events-via-the-cli&#34;&gt;Health, logging &amp;amp; events via the CLI&lt;/h5&gt;

&lt;p&gt;Learning about how your application is performing is critical to help you diagnose and troubleshoot potential issues. Cloud Foundry gives you options for viewing the logs.&lt;/p&gt;

&lt;p&gt;To tail the logs of your application perform this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cf logs &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that nothing is showing because there isn&amp;rsquo;t&amp;rsquo; any activity. Use the following curl command to see the application working:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ curl -i http://&amp;lt;studentXX&amp;gt;-cities-service.pcf2.cloud.fe.pivotal.io/cities/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For other ways of viewing logs check out the documentation here: &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/streaming-logs.html#view&#34;&gt;Streaming Logs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To view recent events, including application crashes, and error codes, you can see them from the App Manager or from the cli.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cf events &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To view the health of the application you can see from the App Manager or from the cli:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cf app &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will get detailed output of the health&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  Showing health and status for app cities-service in org  / space development as...
  OK

  requested state: started
  instances: 1/1
  usage: 512M x 1 instances
  urls: cities-service.pcf2.cloud.fe.pivotal.io
  last uploaded: Wed May 27 15:53:32 UTC 2015
  stack: cflinuxfs2

       state     since                    cpu    memory           disk           details
  #0   running   2015-05-27 12:17:55 PM   0.1%   434.5M of 512M   145.4M of 1G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-10&#34;&gt;Step 10&lt;/h3&gt;

&lt;h5 id=&#34;environment-variables&#34;&gt;Environment variables&lt;/h5&gt;

&lt;p&gt;View the environment variable and explanation of &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#view-env&#34;&gt;VCAP Env&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cf env &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will get the output similar to this on your terminal&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  Getting env variables for app rj-cities-service in org Central / space development as rajesh.jain@pivotal.io...
  OK

  System-Provided:
  {
   &amp;quot;VCAP_SERVICES&amp;quot;: {
    &amp;quot;cleardb&amp;quot;: [
     {
      &amp;quot;credentials&amp;quot;: {
       &amp;quot;hostname&amp;quot;: &amp;quot;xxxx&amp;quot;,
       &amp;quot;jdbcUrl&amp;quot;: &amp;quot;xxxx&amp;quot;,
       &amp;quot;name&amp;quot;: &amp;quot;xxxx&amp;quot;,
       &amp;quot;password&amp;quot;: &amp;quot;xxxx&amp;quot;,
       &amp;quot;port&amp;quot;: &amp;quot;3306&amp;quot;,
       &amp;quot;uri&amp;quot;: &amp;quot;mysql://xxxx?reconnect=true&amp;quot;,
       &amp;quot;username&amp;quot;: &amp;quot;xxxx&amp;quot;
      },
      &amp;quot;label&amp;quot;: &amp;quot;cleardb&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;rj-cities-db&amp;quot;,
      &amp;quot;plan&amp;quot;: &amp;quot;spark&amp;quot;,
      &amp;quot;tags&amp;quot;: [
       &amp;quot;Data Stores&amp;quot;,
       &amp;quot;Cloud Databases&amp;quot;,
       &amp;quot;Developer Tools&amp;quot;,
       &amp;quot;Data Store&amp;quot;,
       &amp;quot;mysql&amp;quot;,
       &amp;quot;relational&amp;quot;
      ]
     }
    ]
   }
  }

  {
   &amp;quot;VCAP_APPLICATION&amp;quot;: {
    &amp;quot;application_name&amp;quot;: &amp;quot;rj-cities-service&amp;quot;,
    &amp;quot;application_uris&amp;quot;: [
     &amp;quot;rj-cities-service.pcf2.cloud.fe.pivotal.io&amp;quot;
    ],
    &amp;quot;application_version&amp;quot;: &amp;quot;c3c35527-424f-4dbc-a4ea-115e1250cc5d&amp;quot;,
    &amp;quot;limits&amp;quot;: {
     &amp;quot;disk&amp;quot;: 1024,
     &amp;quot;fds&amp;quot;: 16384,
     &amp;quot;mem&amp;quot;: 512
    },
    &amp;quot;name&amp;quot;: &amp;quot;rj-cities-service&amp;quot;,
    &amp;quot;space_id&amp;quot;: &amp;quot;56e1d8ef-e87f-4b1c-930b-e7f46c00e483&amp;quot;,
    &amp;quot;space_name&amp;quot;: &amp;quot;development&amp;quot;,
    &amp;quot;uris&amp;quot;: [
     &amp;quot;rj-cities-service.pcf2.cloud.fe.pivotal.io&amp;quot;
    ],
    &amp;quot;users&amp;quot;: null,
    &amp;quot;version&amp;quot;: &amp;quot;c3c35527-424f-4dbc-a4ea-115e1250cc5d&amp;quot;
   }
  }

  User-Provided:
  SPRING_PROFILES_ACTIVE: cloud

  No running env variables have been set

  No staging env variables have been set
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-11&#34;&gt;Step 11&lt;/h3&gt;

&lt;h5 id=&#34;scaling-apps&#34;&gt;Scaling apps&lt;/h5&gt;

&lt;p&gt;Applications can be scaled via the command line or the console. When we talk about scale, there are two different types of scale: Vertical and Horizontal. Read &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/deploy-apps/cf-scale.html&#34;&gt;Scaling Apps&lt;/a&gt; doc on more details on scaling applications.&lt;/p&gt;

&lt;p&gt;When you vertically scale your application, you are increasing the amount of memory made available to your application. You would vertically scale your application while profiling your app, do performance tuning and to find the best memory settings before you deploy it in production.
Scaling your application horizontally means that you are adding application instances to increase your application throughput and performance under load.&lt;/p&gt;

&lt;p&gt;Lets vertically scale the application to 1 GB of RAM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cf scale &amp;lt;studentXX&amp;gt;-cities-service -m 1G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now scale your application down to 512 MB.&lt;/p&gt;

&lt;p&gt;Next, lets scale up your application to 2 instances&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cf scale &amp;lt;studentXX&amp;gt;-cities-service -i 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check the status of your applications you can check from the command line to see how many instances your app is running and their current state&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cf app &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the second instance as started, scale the app back down to one instance.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-12&#34;&gt;Step 12&lt;/h3&gt;

&lt;h5 id=&#34;verify-the-app-from-the-console&#34;&gt;Verify the app from the Console&lt;/h5&gt;

&lt;p&gt;To verify that the application is running, use the following curl commands to retrieve data from the service or use a browser to access the URL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ curl -i http://&amp;lt;studentXX&amp;gt;-cities-service.pcf2.cloud.fe.pivotal.io/cities
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ curl -i http://&amp;lt;studentXX&amp;gt;-cities-service.pcf2.cloud.fe.pivotal.io/cities/162
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ curl -i http://&amp;lt;studentXX&amp;gt;-cities-service.pcf2.cloud.fe.pivotal.io/cities?size=5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;discussion-part-2&#34;&gt;Discussion: Part 2&lt;/h5&gt;

&lt;p&gt;In this part of the workshop we created a database service from the marketplace, pushed an app, bound it to the database service, monitored the health of the app and scaled the app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How does the app get the database info today vs. VCAP_SERVICES? &lt;br&gt;&lt;/li&gt;
&lt;li&gt;How do you horizontally scale your applications?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-3-deploying-upstream-app-and-bind-to-backend-services&#34;&gt;PART 3: Deploying Upstream App and Bind to backend services&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;cities&lt;/code&gt; directory also includes a &lt;code&gt;cities-ui&lt;/code&gt; application which uses the &lt;code&gt;cities-client&lt;/code&gt; to consume from the &lt;code&gt;cities-service&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cities-client&lt;/code&gt; demonstrates using the &lt;a href=&#34;http://cloud.spring.io/spring-cloud-connectors&#34;&gt;Spring Cloud Connector&lt;/a&gt; project to consume from a microservice.  This is a common pattern for Cloud Native apps.  For more details on building 12 Factor Apps for the Cloud (Cloud Foundry) refer to &lt;a href=&#34;http://12factor.net/&#34;&gt;12 Factor&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;The goal of this exercise is to use what you have learned to deploy the &lt;code&gt;cities-ui&lt;/code&gt; application.&lt;/p&gt;

&lt;h3 id=&#34;step-13&#34;&gt;Step 13&lt;/h3&gt;

&lt;h5 id=&#34;build-the-cities-ui-and-cities-client-app&#34;&gt;Build the Cities UI and Cities Client App&lt;/h5&gt;

&lt;p&gt;The cities-ui and cities-client can be both built at once by running &lt;code&gt;./gradlew assemble&lt;/code&gt; in the parent directory. Run this command now.&lt;/p&gt;

&lt;h3 id=&#34;step-14&#34;&gt;Step 14&lt;/h3&gt;

&lt;h5 id=&#34;create-a-user-provided-service-instance&#34;&gt;Create a User Provided Service Instance.&lt;/h5&gt;

&lt;p&gt;In this section we will create a backend microservice end point for cities-service.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Review the documentation on link:&lt;a href=&#34;http://docs.pivotal.io/pivotalcf/devguide/services/user-provided.html[User&#34;&gt;http://docs.pivotal.io/pivotalcf/devguide/services/user-provided.html[User&lt;/a&gt; Provided Service Instances]&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Look for the details by running &lt;code&gt;cf cups --help&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will need to specify the parameter citiesuri to the user defined service instance .&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  // Use the interactive prompt to create user defined service
  // It will prompt you for the parameters

  $ cf create-user-provided-service &amp;lt;studentXX&amp;gt;-cities-ws -p &amp;quot;citiesuri&amp;quot;

  citiesuri&amp;gt;   http://&amp;lt;studentXX&amp;gt;-cities-service.pcf2.cloud.fe.pivotal.io/

  Creating user provided service....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-15&#34;&gt;Step 15&lt;/h3&gt;

&lt;h5 id=&#34;deploy-cities-ui-project&#34;&gt;Deploy cities-ui project&lt;/h5&gt;

&lt;p&gt;A &lt;code&gt;manifest.yml&lt;/code&gt; is included in the cities-ui app.  Edit this manifest with your initials and add the service binding to your cities-service&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $cd cities-ui
  $nano manifest.yml (Or your favorite editor)

  ---
  applications:
  - name: &amp;lt;YOUR INITIALS&amp;gt;-cities-ui
    memory: 512M
    instances: 1
    path: build/libs/cities-ui.jar
    services: [ &amp;lt;YOUR INITIALS&amp;gt;-cities-ws ]
    env:
      SPRING_PROFILES_ACTIVE: cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Push the &lt;code&gt;cities-ui&lt;/code&gt; without specifying the manifest.yml. It will by default pick the manifest.yml file and deploy the app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cf push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the URL once the application has been successfully pushed.&lt;/p&gt;

&lt;h3 id=&#34;step-16&#34;&gt;Step 16&lt;/h3&gt;

&lt;h5 id=&#34;verify-the-backend-service-is-bound-to-cities-ui&#34;&gt;Verify the backend service is bound to cities-ui&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;----
$ cf env &amp;lt;studentXX&amp;gt;-cities-ui

System-Provided:
{
 &amp;quot;VCAP_SERVICES&amp;quot;: {
  &amp;quot;user-provided&amp;quot;: [
   {
    &amp;quot;credentials&amp;quot;: {
     &amp;quot;tag&amp;quot;: &amp;quot;cities&amp;quot;,
     &amp;quot;uri&amp;quot;: &amp;quot;http://rj-cities-service.pcf2.cloud.fe.pivotal.io/&amp;quot;
    },
    &amp;quot;label&amp;quot;: &amp;quot;user-provided&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;cities-ws&amp;quot;,
    &amp;quot;syslog_drain_url&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;tags&amp;quot;: []
   }
  ]
 }
}

{
 &amp;quot;VCAP_APPLICATION&amp;quot;: {
  &amp;quot;application_name&amp;quot;: &amp;quot;rj-cities-ui&amp;quot;,
  &amp;quot;application_uris&amp;quot;: [
   &amp;quot;rj-cities-ui.pcf2.cloud.fe.pivotal.io&amp;quot;
  ],
  &amp;quot;application_version&amp;quot;: &amp;quot;dceb111b-3a68-45ad-83fd-3b8b836ebbe7&amp;quot;,
  &amp;quot;limits&amp;quot;: {
   &amp;quot;disk&amp;quot;: 1024,
   &amp;quot;fds&amp;quot;: 16384,
   &amp;quot;mem&amp;quot;: 512
  },
  &amp;quot;name&amp;quot;: &amp;quot;rj-cities-ui&amp;quot;,
  &amp;quot;space_id&amp;quot;: &amp;quot;56e1d8ef-e87f-4b1c-930b-e7f46c00e483&amp;quot;,
  &amp;quot;space_name&amp;quot;: &amp;quot;development&amp;quot;,
  &amp;quot;uris&amp;quot;: [
   &amp;quot;rj-cities-ui.pcf2.cloud.fe.pivotal.io&amp;quot;
  ],
  &amp;quot;users&amp;quot;: null,
  &amp;quot;version&amp;quot;: &amp;quot;dceb111b-3a68-45ad-83fd-3b8b836ebbe7&amp;quot;
 }
}

User-Provided:
SPRING_PROFILES_ACTIVE: cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-17&#34;&gt;Step 17&lt;/h3&gt;

&lt;h5 id=&#34;access-the-cities-ui-to-verify-it-is-connected-to-your-microservice&#34;&gt;Access the cities-ui to verify it is connected to your microservice.&lt;/h5&gt;

&lt;p&gt;Open the App Manager (Console) and navigate to your apps. You will see the cities-ui app, with a link to launch the cities-ui application. Alternatively you can open up your browser and navigate to the URL listed from a successful cf push command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/cities-ui.png&#34; alt=&#34;Cities UI&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h5 id=&#34;discussion-part-3&#34;&gt;Discussion: Part 3&lt;/h5&gt;

&lt;p&gt;In this part of the workshop we created a cities-ui app which is loosely bound and independently developed from the backend service. We bound that app to the cities-service microservice.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Discussion on loose coupling of your services from your app and 12 Factor App design principles.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-4-deploy-version-2-of-the-app&#34;&gt;PART 4: Deploy Version 2 of the App&lt;/h2&gt;

&lt;p&gt;In this section we are going to do a green-blue deployment using cf plugin &lt;code&gt;autopilot&lt;/code&gt;. The same can be done by executing cf commands.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-18&#34;&gt;Step 18&lt;/h3&gt;

&lt;h5 id=&#34;delete-the-unversioned-app-and-the-route&#34;&gt;Delete the unversioned app and the route&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  cf delete -r &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-19&#34;&gt;Step 19&lt;/h3&gt;

&lt;h5 id=&#34;process-of-blue-green-deployment&#34;&gt;Process of Blue Green Deployment&lt;/h5&gt;

&lt;p&gt;Review the CF Document for blue green deployment link:&lt;a href=&#34;https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/blue-green.html[Using&#34;&gt;https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/blue-green.html[Using&lt;/a&gt; Blue-Green Deployment to Reduce Downtime and Risk]&lt;/p&gt;

&lt;p&gt;In summary Blue-green deployment is a release technique that reduces downtime and risk by running two identical production environments called Blue and Green.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/blue-green-process.png&#34; alt=&#34;Blue Green Deployment Process&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Cloud Foundry plugin &lt;a href=&#34;https://github.com/concourse/autopilot&#34;&gt;Autopilot&lt;/a&gt; does blue green deployment, albeit it takes a different approach to other zero-downtime plugins. It does not perform any complex route re-mappings instead it leans on the manifest feature of the Cloud Foundry CLI. The method also has the advantage of treating a manifest as the source of truth and will converge the state of the system towards that. This makes the plugin ideal for continuous delivery environments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
  $ mkdir $HOME/go
  $ export GOPATH=$HOME/go
  $ export PATH=$PATH:$GOPATH/bin

  $ go get github.com/concourse/autopilot
  $ cf install-plugin $GOPATH/bin/autopilot
  $ cd cities-service
  // Append the build number to the app Name

  $ cf zero-downtime-push &amp;lt;studentXX&amp;gt;-cities-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you would like to inject build numbers in your app names here is a script you could use to do blue green deployments in the cities-service directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage: blue-green.sh &amp;lt;app-name&amp;gt; &amp;lt;build-number&amp;gt; &amp;lt;domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
  $ ./blue-green.sh  cities-service 1001 pcf2.cloud.fe.pivotal.io
  $ cf apps // You should see your app build 1001 and the Route
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now push the new build 1002 of the app&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ ./blue-green.sh  cities-service 1002 pcf2.cloud.fe.pivotal.io
  $ cf apps // You should see your app build 1002 and the same route mapped to the new build

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;discussion-part-4&#34;&gt;Discussion: Part 4&lt;/h5&gt;

&lt;p&gt;In this part of the workshop did deployment using a blue green script without any downtime.
This script / methodology can be used in your CD pipeline to build and deploy Cloud Native Apps with zero downtime.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Discussion on how do you do Continous Deployment and Delivery with zero downtime today.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;recap&#34;&gt;Recap&lt;/h5&gt;

&lt;p&gt;In this workshop we saw how to build, deploy, bind, scale, monitor apps on Cloud foundry and manage the lifecycle of the application&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/devops-cf.png&#34; alt=&#34;DevOps on CF&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;q-a&#34;&gt;Q/A&lt;/h3&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;Please provide your feedback using this form &lt;a href=&#34;https://docs.google.com/a/pivotal.io/forms/d/1qWlLtTuoULomw9DAW0tuhn7YVWXwVILaMTNKfXkcq0s/viewform?usp=send_form&#34;&gt;Feedback Form&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 6: Build Pipelines using Concourse.ci</title>
      <link>http://loves.cfapps.io/2016/03/15/lab-6-build-pipelines-using-concourse.ci/</link>
      <pubDate>Tue, 15 Mar 2016 14:54:22 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/03/15/lab-6-build-pipelines-using-concourse.ci/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;In this workshop, you will learn how to Build Pipelines to for unit testing, staging and production deployment to Cloud Foundry using Concourse.ci&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Concourse&amp;rsquo;s end goal is to provide an expressive CI system with as few distinct moving parts as possible.&lt;/p&gt;

&lt;p&gt;Concourse CI decouples your project from your CI&amp;rsquo;s details, and keeping all configuration in declarative files that can be checked into version control.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/concourse-1.png&#34; alt=&#34;Concourse CI&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Concourse limits itself to three core concepts: tasks, resources, and the jobs that compose them. Interesting features like timed triggers and synchronizing usage of external environments are modeled in terms of these, rather than as layers on top.&lt;/p&gt;

&lt;p&gt;With these primitives you can model any pipeline, from simple (unit → integration → deploy → ship) to complex (testing on multiple infrastructures, fanning out and in, etc.).&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java SDK 1.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pivotal CF Env or Pivotal Web Services Account.  Create a free trial account here &lt;a href=&#34;http://run.pivotal.io/&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Vagrant (&lt;a href=&#34;https://vagrantup.com/&#34;&gt;https://vagrantup.com/&lt;/a&gt;) to run Concourse locally&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fly cli. The fly tool is a command line interface to Concourse, it available when you bring up Concourse&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In this workshop we are going to follow these steps to use the circuit-breaker in a Cloud Native Spring Boot app on Cloud foundry using the Spring Cloud Circuit Breaker Service.&lt;/p&gt;

&lt;p&gt;Learn how to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Start and Configure Concourse.CI server
- Create a Pipeline
- Trigger a Pipeline using Fly
- Run a pipeline to test, stage and deploy on Cloud Foundry
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-1-building-simple-pipelines&#34;&gt;Part 1: Building simple Pipelines&lt;/h2&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;h5 id=&#34;configure-your-concourse-ci-server&#34;&gt;Configure your Concourse.CI server&lt;/h5&gt;

&lt;p&gt;Download the Concourse CI server and boot up using vagrant. This step will take some time, you can do this prior to the start of the workshop presentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$mkdir ciworkshop &amp;amp;&amp;amp; cd ciworkshop // ci workshop working directory
$vagrant init concourse/lite # creates ./Vagrantfile
$vagrant up                  # downloads the box and spins up the VM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The web server will be running at &lt;a href=&#34;http://192.168.100.4:8080&#34;&gt;http://192.168.100.4:8080&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open up the Concourse UI web page, you don&amp;rsquo;t have any pipelines configured. But you can download the fly cli from here. At the right hand bottom, use the links to download the &lt;strong&gt;fly cli&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re on Linux or OS X, you will have to &lt;code&gt;chmod +x&lt;/code&gt; the downloaded binary and put it in your $PATH&lt;/p&gt;

&lt;p&gt;Next, lets target and login to the Concourse server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fly -t lite login -c http://192.168.100.4:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;h5 id=&#34;create-your-first-pipeline&#34;&gt;Create your first pipeline&lt;/h5&gt;

&lt;p&gt;We have an existing project &lt;code&gt;flight-school&lt;/code&gt; in a git repo, which we can clone and use for our first pipeline.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git clone https://github.com/rjain-pivotal/flight-school.git
$cd flight-school\ci

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the ci folder there is a properties file, flight-school-properties-sample.yml&lt;/p&gt;

&lt;p&gt;This contains the cf and git specific configuration which is read by the pipeline.&lt;/p&gt;

&lt;p&gt;Make a local copy of the flight-school-properties-sample.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/.concourse
cp ci/flight-school-properties-sample.yml ~/.concourse/flight-school-properties.yml
chmod 600 ~/.concourse/flight-school-properties.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now edit the ~/.concourse/flight-school-properties.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;github-uri: https://github.com/.../flight-school.git
github-branch: master
cf-api: https://api.local.micropcf.io
cf-username: admin
cf-password: admin
cf-org: micropcf-org
cf-space: micropcf-space
cf-manifest-host: pcfdemo-ci

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Review your pipeline file in the ci folder\pipeline.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resources:
- name: flight-school
  type: git
  source:
      uri: {{github-uri}}
      branch: {{github-branch}}
- name: staging-app
  type: cf
  source:
      api: {{cf-api}}
      username: {{cf-username}}
      password: {{cf-password}}
      organization: {{cf-org}}
      space: {{cf-space}}
      skip_cert_check: true

jobs:
- name: test-app
  plan:
  - get: flight-school
    trigger: true
  - task: tests
    file: flight-school/ci/tasks/build.yml
  - put: staging-app
    params:
      manifest: flight-school/manifest.yml

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This pipeline has two resources and a single job. The resource &lt;code&gt;flight-school&lt;/code&gt; is the &lt;code&gt;git&lt;/code&gt; repo and the resource &lt;code&gt;staging-app&lt;/code&gt; is the &lt;code&gt;cloud-foundry&lt;/code&gt; space to stage the app.&lt;/p&gt;

&lt;p&gt;The single job in the pipeline &lt;code&gt;test-app&lt;/code&gt; gets the source code from git on any commits to the repo, and triggers the task defined in the &lt;code&gt;build.yml&lt;/code&gt;. Next, on completion of this task, it puts the output artifact in to the staging-app resource using the manifest file defined for &lt;code&gt;cf push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Edit the manifest file to reflect your app name&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name: &amp;lt;student-id&amp;gt;-flight-school
memory: 128M
random-route: true
path: .

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;

&lt;h5 id=&#34;set-the-pipeline-using-fly&#34;&gt;Set the Pipeline using Fly&lt;/h5&gt;

&lt;p&gt;Now you have your pipeline defined, it is ready to be uploaded to the CI Server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$fly -t lite set-pipeline -p flight-school -c ci/pipeline.yml -l ~/.concourse/flight-school-properties.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4&#34;&gt;Step 4&lt;/h3&gt;

&lt;h5 id=&#34;trigger-the-pipeline-and-stage-the-app&#34;&gt;Trigger the Pipeline and stage the app&lt;/h5&gt;

&lt;p&gt;Test the tasks manually before you run the whole Pipelines&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fly -t lite execute -c ci/tasks/build.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;fly -t lite trigger-job --job flight-school/test-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/concourse-2.png&#34; alt=&#34;Concourse CI&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;part-2-running-a-real-world-pipeline&#34;&gt;Part 2: Running a real world pipeline&lt;/h2&gt;

&lt;h3 id=&#34;step-5&#34;&gt;Step 5&lt;/h3&gt;

&lt;h5 id=&#34;configure-a-multi-step-pipeline&#34;&gt;Configure a multi step pipeline&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Clone the git repo which has a sample app PCFDemo with a real world pipeline.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/rjain-pivotal/PCF-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure you have an S3 bucket configured to save your artifacts and the IAM user credentials to access the bucket.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the properties files and assign it to the pipeline&lt;/p&gt;

&lt;p&gt;Copy the pcfdemo-properties-sample.yml to your ~/.concourse/pcfdemo-properties.yml
Change the cf properties, github properties and s3 properties.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;github-uri: https://github.com/&amp;lt;github-user&amp;gt;/PCF-demo.git
github-branch: master
s3-access-key-id: SAMPLEDF99FSWEBF9DW9  # AWS or S3 compatible access key id
s3-secret-access-key: sampleaxfdpiA98FG8u7ahd08Sdgf8AFG8gh8S0F  # AWS or S3 compatible secret access key
s3-endpoint: s3.amazonaws.com
s3-bucket-version: pcfdemo-releases
s3-bucket-releases: pcfdemo-releases
s3-bucket-release-candidates: pcfdemo-release-candidates
maven-opts: # -Xms256m -Xmx512m
maven-config: # -s path/to/settings.xml
cf-api: https://api.local.micropcf.io
cf-username: admin
cf-password: admin
cf-org: micropcf-org
cf-space: micropcf-space
cf-manifest-host: pcfdemo-ci
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the pipeline&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fly -t lite set-pipeline -p pcfdemo -c ci/pipeline.yml -l ~/.concourse/pcfdemo-properties.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Trigger the pipeline&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fly -t lite trigger-job --job pcfdemo/unit-test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/concourse-3.png&#34; alt=&#34;Concourse CI&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 5: Spring Cloud Circuit Breaker</title>
      <link>http://loves.cfapps.io/2016/04/15/lab-5-spring-cloud-circuit-breaker/</link>
      <pubDate>Fri, 15 Apr 2016 11:28:20 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/04/15/lab-5-spring-cloud-circuit-breaker/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;In this workshop, you will learn how to apply the circuit breaker pattern in your Spring boot apps.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centers, and managed platforms such as Cloud Foundry.&lt;/p&gt;

&lt;p&gt;The big picture : Use Spring Cloud Services design patterns to build cloud Native applications&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-1.png&#34; alt=&#34;Cloud Native Spring Application Architecture&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Circuit Breaker Dashboard for Pivotal Cloud Foundry® (PCF) provides Spring applications with an implementation of the Circuit Breaker pattern. Cloud-native architectures are typically composed of multiple layers of distributed services. End-user requests may comprise multiple calls to these services, and if a lower-level service fails, the failure can cascade up to the end user and spread to other dependent services. Heavy traffic to a failing service can also make it difficult to repair. Using Circuit Breaker Dashboard, you can prevent failures from cascading and provide fallback behavior until a failing service is restored to normal operation.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java SDK 1.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Git from &lt;a href=&#34;https://mac.github.com/&#34;&gt;github.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud Foundry CLI for &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/installcf/install-go-cli.html#windows&#34;&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curl from &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pivotal Web Services Account.  Create a free trial account here &lt;a href=&#34;http://run.pivotal.io/&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maven for build (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In this workshop we are going to follow these steps to use the circuit-breaker in a Cloud Native Spring Boot app on Cloud foundry using the Spring Cloud Circuit Breaker Service.&lt;/p&gt;

&lt;p&gt;Learn how to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Config a Spring Cloud Circuit Breaker Service
- Use Circuit Breaker  (Hysterix) in a Spring Boot application
- Simulate a failure and watch the circuit breaker manage failures
- Restore the service and watch the circuit breaker restore back the circuit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When applied to a service, a circuit breaker watches for failing calls to the service. If failures reach a certain threshold, it “opens” the circuit and automatically redirects calls to the specified fallback mechanism. This gives the failing service time to recover.&lt;/p&gt;

&lt;p&gt;Desired the architecture of this Cloud Native Spring boot app is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-1.png&#34; alt=&#34;Circuit Breaker with Cloud Native Spring App&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;h5 id=&#34;get-the-traveler-app&#34;&gt;Get the traveler app&lt;/h5&gt;

&lt;p&gt;Clone the git repo which has a simple boilerplate Spring boot app built using Spring Initializer.&lt;/p&gt;

&lt;p&gt;The Spring Labs repo contains multiple apps, we are going to focus on traveler app in this exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/rjain-pivotal/pcf-workshop-spring-labs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;h5 id=&#34;login-into-pivotal-cloud-foundry&#34;&gt;Login into Pivotal Cloud Foundry&lt;/h5&gt;

&lt;p&gt;The students have userId&amp;rsquo;s (student1-student25) and the passwords will be distributed in the workshop.
Each student is assigned their own Organization (student1-org)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.pcf2.cloud.fe.pivotal.io --skip-ssl-validation
  Email: student1
  Password: ••••••••
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login to the App Console at &lt;a href=&#34;https://apps.pcf2.cloud.fe.pivotal.io&#34;&gt;https://apps.pcf2.cloud.fe.pivotal.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console.png&#34; alt=&#34;PCF App Console&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;

&lt;h5 id=&#34;configure-the-spring-cloud-circuit-breaker-instance-from-the-marketplace&#34;&gt;Configure the Spring Cloud Circuit Breaker Instance from the marketplace&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the PCF App Console, create a instance of the Registry Service from the marketplace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console-2.png&#34; alt=&#34;Marketplace Services&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the default plan.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the service instance as &amp;lsquo;studentXX-circuit-breaker-dashboard&amp;rsquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-2.png&#34; alt=&#34;Circuit Breaker&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This will create the studentXX-circuit-breaker-dashboard service instance. To view the configuration of this service by clicking manage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-3.png&#34; alt=&#34;Circuit Breaker&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-4&#34;&gt;Step 4&lt;/h3&gt;

&lt;h5 id=&#34;code-walk-through-traveler&#34;&gt;Code walk through (traveler)&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the code in the traveler app in the source repo (Step #1) using your favorite editor (Atom/Sublime/Eclipse/IntelliJ/STS)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;traveler/feign-agency/src/main/java/agency/AgencyApplication.java&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;To work with a Circuit Breaker Dashboard instance, your application must include the &lt;code&gt;@EnableCircuitBreaker&lt;/code&gt; annotation on a configuration class. This client application also using service registry to discover the Company service and Feign to build the interace for accessing the services&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

  import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;

  import org.springframework.cloud.netflix.feign.EnableFeignClients;

  @SpringBootApplication
  @EnableDiscoveryClient
  @RestController
  @EnableCircuitBreaker
  @EnableFeignClients
  public class AgencyApplication {
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;traveler/feign-agency/pom.xml&lt;/em&gt; file. By adding &lt;em&gt;spring-cloud-services-starter-circuit-breaker&lt;/em&gt; to the classpath this application is able to use the circuit breaker.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-feign&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;

  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.pivotal.spring.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-services-starter-service-registry&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;

  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.pivotal.spring.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-services-starter-circuit-breaker&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;traveler/feign-agency/src/main/java/agency/TravelAgent.java&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To apply a circuit breaker to a method, annotate the method with &lt;code&gt;@HystrixCommand&lt;/code&gt;, giving the annotation the name of a fallbackMethod.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@HystrixCommand(fallbackMethod = &amp;quot;getBackupGuide&amp;quot;)
public String getGuide() {
    return company.availableGuide();
}

String getBackupGuide() {
    return &amp;quot;None available! Your backup guide is: Cookie&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;getGuide()&lt;/code&gt; method uses a RestTemplate to obtain a guide name from another application called Company, which is registered with a Service Registry instance.&lt;/p&gt;

&lt;p&gt;The method thus relies on the Company application to return a response, and if the Company application fails to do so, calls to &lt;code&gt;getGuide()&lt;/code&gt; will fail. When the failures exceed the threshold, the breaker on &lt;code&gt;getGuide()&lt;/code&gt; will open the circuit.&lt;/p&gt;

&lt;p&gt;While the circuit is open, the breaker redirects calls to the annotated method, and they instead call the designated fallbackMethod. The fallback method must be in the same class and have the same method signature (i.e., have the same return type and accept the same parameters) as the annotated method.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more details, refer to the documentation of the Circuit Breaker configuration here (&lt;a href=&#34;https://docs.pivotal.io/spring-cloud-services/circuit-breaker/writing-client-applications.html&#34;&gt;https://docs.pivotal.io/spring-cloud-services/circuit-breaker/writing-client-applications.html&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;step-5&#34;&gt;Step 5&lt;/h3&gt;

&lt;h5 id=&#34;push-the-app-to-cloud-foundry&#34;&gt;Push the app to cloud Foundry&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change the manifest.yml file in the traveler/company to reflect the name of the app and the service-registry&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
memory: 512M
applications:
  - name: &amp;lt;studentXX&amp;gt;-company
    services:
      - &amp;lt;studentXX&amp;gt;-service-registry
    path: ./target/company-0.0.1-SNAPSHOT.jar
    env:
      SPRING_PROFILES_ACTIVE: dev
      CF_TARGET: https://api.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the manifest.yml file in the traveler/feign-agency to reflect the name of the app and the circuit-breaker and service-registry Services&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
instances: 1
memory: 512M
applications:
  - name:  &amp;lt;studentXX&amp;gt;-agency
    path: ./target/agency-0.0.1-SNAPSHOT.jar
    services:
      -  &amp;lt;studentXX&amp;gt;-service-registry
      -  &amp;lt;studentXX&amp;gt;-circuit-breaker-dashboard
    env:
      SPRING_PROFILES_ACTIVE: dev
      CF_TARGET: https://api.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app using maven in the parent traveler directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $cd traveler
  $mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the apps using scripts/deploy_mvn.sh or scripts/deploy_mvn.bat&lt;/p&gt;

&lt;p&gt;First check and change the service names in the script. If the script registry is already created don&amp;rsquo;t create a new one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #cf create-service p-service-registry standard &amp;lt;studentXX&amp;gt;-service-registry
  cf create-service p-circuit-breaker-dashboard standard &amp;lt;studentXX&amp;gt;-circuit-breaker-dashboard
  sleep 120
  pushd company &amp;amp;&amp;amp; cf push -p target/company-0.0.1-SNAPSHOT.jar
  popd; sleep 30
  pushd feign-agency &amp;amp;&amp;amp; cf push -p target/agency-0.0.1-SNAPSHOT.jar
  popd
  echo &amp;quot;&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;Done!&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, push using this scripts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $cd traveler
  $./scripts/deploy_mvn.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App&lt;/p&gt;

&lt;p&gt;First, Get the route to your app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // This is the agency app
  http://&amp;lt;studentXX&amp;gt;-agency.pcf2.cloud.fe.pivotal.io/

  // Note this is the company app
  http://&amp;lt;studentXX&amp;gt;-company.pcf2.cloud.fe.pivotal.io/available
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the Hysterix Dashboard from the App Console -&amp;gt; Manage Hysterix Service instance&lt;/p&gt;

&lt;p&gt;When service calls are succeeding, the circuit is closed, and the dashboard graph shows the rate of calls per second and successful calls per 10 seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-4.png&#34; alt=&#34;Circuit Breaker Open&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-6&#34;&gt;Step 6&lt;/h3&gt;

&lt;h5 id=&#34;shut-down-the-company-service&#34;&gt;Shut down the Company Service&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If the Company application becomes unavailable or if the Agency application cannot access it, calls to getGuide() will fail.&lt;/p&gt;

&lt;p&gt;When successive failures build up to the threshold, Hystrix will open the circuit, and subsequent calls will be redirected to the getBackupGuide() method until the Company application is accessible again and the circuit is closed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cf stop  &amp;lt;studentXX&amp;gt;-company
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now check the app status, the agency app will fall back to the backup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http:// &amp;lt;studentXX&amp;gt;-agency.pcf2.cloud.fe.pivotal.io/

Your guide will be: None available! Your backup guide is: Cookie
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the Hysterix Dashboard from the App Console -&amp;gt; Manage Hysterix Service instance&lt;/p&gt;

&lt;p&gt;When calls begin to fail, the graph shows the rate of failed calls in red.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-5.png&#34; alt=&#34;Circuit Breaker Open&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Load the circuit&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while true; do curl http://&amp;lt;studentXX&amp;gt;-agency.pcf2.cloud.fe.pivotal.io/; done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When failures exceed the configured threshold (the default is 20 failures in 5 seconds), the breaker opens the circuit.&lt;/p&gt;

&lt;p&gt;The dashboard shows the rate of short-circuited calls—calls which are going straight to the fallback method—in blue.&lt;/p&gt;

&lt;p&gt;The application is still allowing calls to the failing method at a rate of 1 every 5 seconds, as indicated in red; this is necessary to determine if calls are succeeding again and if the circuit can be closed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/circuit-breaker-6.png&#34; alt=&#34;Circuit Breaker Open&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Lab 4: Spring Cloud Registry Server</title>
      <link>http://loves.cfapps.io/2016/04/13/lab-4-spring-cloud-registry-server/</link>
      <pubDate>Wed, 13 Apr 2016 00:19:42 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/04/13/lab-4-spring-cloud-registry-server/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;To create a Spring boot application using Spring Cloud Registry Server and deploy it on the Cloud Foundry Platform.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centers, and managed platforms such as Cloud Foundry.&lt;/p&gt;

&lt;p&gt;The big picture : Use Spring Cloud Services design patterns to build cloud Native applications&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-1.png&#34; alt=&#34;Cloud Native Spring Application Architecture&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java SDK 1.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Git from &lt;a href=&#34;https://mac.github.com/&#34;&gt;github.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud Foundry CLI for &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/installcf/install-go-cli.html#windows&#34;&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curl from &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pivotal Web Services Account.  Create a free trial account here &lt;a href=&#34;http://run.pivotal.io/&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maven for build (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In this workshop we are going to follow these steps to build our first Cloud Native Spring Boot app on Cloud foundry using the Spring Cloud Registry Server.&lt;/p&gt;

&lt;p&gt;Learn how to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Config a Spring Cloud Service Registry
- Use Service Registry (Eureka) in a Spring Boot application
- Register services (fortune-service) with Service Registry (Eureka)
- Discover and Consume services (greeting-feign) with Service Registry (Eureka)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Desired the architecture of this Cloud Native Spring boot app is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-3.png&#34; alt=&#34;Registry Server with Cloud Native Spring App&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-1-register-a-service&#34;&gt;PART 1: Register a service.&lt;/h2&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;h5 id=&#34;get-the-fortune-service-app&#34;&gt;Get the fortune-service app&lt;/h5&gt;

&lt;p&gt;Clone the git repo which has a simple boilerplate Spring boot app built using Spring Initializer.&lt;/p&gt;

&lt;p&gt;The Spring Labs repo contains multiple apps, we are going to focus on fortune-service app in this exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/rjain-pivotal/pcf-workshop-spring-labs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;h5 id=&#34;login-into-pivotal-cloud-foundry&#34;&gt;Login into Pivotal Cloud Foundry&lt;/h5&gt;

&lt;p&gt;The students have userId&amp;rsquo;s (student1-student25) and the passwords will be distributed in the workshop.
Each student is assigned their own Organization (student1-org)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.pcf2.cloud.fe.pivotal.io --skip-ssl-validation
  Email: student1
  Password: ••••••••
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login to the App Console at &lt;a href=&#34;https://apps.pcf2.cloud.fe.pivotal.io&#34;&gt;https://apps.pcf2.cloud.fe.pivotal.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console.png&#34; alt=&#34;PCF App Console&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;

&lt;h5 id=&#34;configure-the-spring-cloud-registry-service-instance-from-the-marketplace&#34;&gt;Configure the Spring Cloud Registry Service Instance from the marketplace&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the PCF App Console, create a instance of the Registry Service from the marketplace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console-2.png&#34; alt=&#34;Marketplace Services&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the default plan.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the service instance as &amp;lsquo;studentXX-registry-service&amp;rsquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-service-1.png&#34; alt=&#34;Registry Service&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This will create the studentXX-registry-service service instance. To view the configuration of this service by clicking manage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-service-2.png&#34; alt=&#34;Registry Service&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-4&#34;&gt;Step 4&lt;/h3&gt;

&lt;h5 id=&#34;code-walk-through-fortune-service&#34;&gt;Code walk through (fortune-service)&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the code in the fortune-service app in the source repo (Step #1) using your favorite editor (Atom/Sublime/Eclipse/IntelliJ/STS)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;fortune-service/src/main/resources/bootstrap.yml&lt;/em&gt; file. The name of this app is fortune-service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  server:
   port: 8787
  spring:
   application:
     name: fortune-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;spring.application.name is the name the application will use when registering with Eureka.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;fortune-service/pom.xml&lt;/em&gt; file. By adding &lt;em&gt;spring-cloud-services-starter-service-registry&lt;/em&gt; to the classpath this application is eligible to register and discover services with the service-registry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.pivotal.spring.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-services-starter-service-registry&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;em&gt;fortune-service/src/main/java/io/pivotal/FortuneServiceApplication.java&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;@EnableDiscoveryClient.&lt;/code&gt; This enables a discovery client that registers the fortune-service with the service-registry application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDiscoveryClient
public class FortuneServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(FortuneServiceApplication.class, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-5&#34;&gt;Step 5&lt;/h3&gt;

&lt;h5 id=&#34;push-the-app-to-cloud-foundry&#34;&gt;Push the app to cloud Foundry&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change the manifest.yml file in the fortune-service/ to reflect the name of the app and the service-registry&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
applications:
- name: &amp;lt;studentXXX&amp;gt;-fortune-service
  memory: 512MB
  instances: 1
  host: &amp;lt;studentXXX&amp;gt;-fortune-service
  path: ./target/fortune-service-0.0.1-SNAPSHOT.jar
  services:
  - &amp;lt;studentXXX&amp;gt;-service-registry
  env:
    CF_TARGET: https://api.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app using maven&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the app using cf cli&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cf push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App
Get the route to your app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  http://fortune-service-decompressive-retrenchment.pcf2.cloud.fe.pivotal.io/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-6&#34;&gt;Step 6&lt;/h3&gt;

&lt;h5 id=&#34;verify-the-app-is-registered-in-the-service-registry&#34;&gt;Verify the App is registered in the Service Registry&lt;/h5&gt;

&lt;p&gt;After the a few moments, check the service-registry dashboard. Confirm the fortune-service is registered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-service-3.png&#34; alt=&#34;Service Registry&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;part-2-consume-a-service&#34;&gt;PART 2: Consume a service.&lt;/h2&gt;

&lt;h3 id=&#34;step-7&#34;&gt;Step 7&lt;/h3&gt;

&lt;h5 id=&#34;build-restful-interface-for-consuming-services-using-netflix-feign&#34;&gt;Build Restful interface for consuming services using Netflix Feign&lt;/h5&gt;

&lt;p&gt;You have the greeting-service app in the cloned repo (Step 1) which has the client to consume service.&lt;/p&gt;

&lt;p&gt;Lets walk through the code&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the greeting-feign/pom.xml file , with the &lt;em&gt;spring-cloud-starter-feign&lt;/em&gt;  dependency,  this application is eligible to discover services with the service-registry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-feign&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the &lt;em&gt;GreetingFeignApplication.java&lt;/em&gt; includes the @EnableDiscoveryClient annotation on a configuration class. To have Feign client interfaces automatically configured, it must also use the @EnableFeignClients annotation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @SpringBootApplication
  @EnableDiscoveryClient
  @EnableFeignClients
  public class GreetingFeignApplication {

      public static void main(String[] args) {
          SpringApplication.run(GreetingFeignApplication.class, args);
      }

  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application’s actual URL; the Registry will take care of finding and routing to the service.&lt;/p&gt;

&lt;p&gt;Pivotal Cloud Foundry installation is configured to only allow HTTPS traffic, you must specify the https:// scheme in the base URI used by your client application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @FeignClient(&amp;quot;https://fortune-service&amp;quot;)
  public interface FortuneServiceClient {

     @RequestMapping(method = RequestMethod.GET, value = &amp;quot;/&amp;quot;)
     String getFortune();
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-8&#34;&gt;Step 8&lt;/h3&gt;

&lt;h5 id=&#34;build-and-push-the-consuming-app&#34;&gt;Build and Push the Consuming app&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Next, update the manifest.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
applications:
- name: greeting-feign
  memory: 512MB
  instances: 1
  host: &amp;lt;studentXXX&amp;gt;-greeting-feign
  path: ./target/greeting-feign-0.0.1-SNAPSHOT.jar
  services:
  - &amp;lt;studentXX&amp;gt;-service-registry
  env:
    CF_TARGET: https://api.pcf2.cloud.fe.pivotal.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app using maven&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the app using cf cli&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cf push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App&lt;/p&gt;

&lt;p&gt;Get the route to your app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  http://studentXXX-greeting-feign.pcf2.cloud.fe.pivotal.io/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-example.png&#34; alt=&#34;Service Registry Example&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-9&#34;&gt;Step 9&lt;/h3&gt;

&lt;h5 id=&#34;verify-the-app-is-registered-in-the-service-registry-1&#34;&gt;Verify the App is registered in the Service Registry&lt;/h5&gt;

&lt;p&gt;This app is also registered as a service in the Service registry. Check the service-registry dashboard. Confirm the fortune-service and greeting-feign is registered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-registry-service-4.png&#34; alt=&#34;Service Registry&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 3: Spring Cloud Config Server</title>
      <link>http://loves.cfapps.io/2016/04/11/lab-3-spring-cloud-config-server/</link>
      <pubDate>Mon, 11 Apr 2016 23:37:14 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/04/11/lab-3-spring-cloud-config-server/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;To create a Spring boot application using Spring Cloud Config Server to store and fetch configuration information and deploy it on the Pivotal Cloud Foundry Platform.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centers, and managed platforms such as Cloud Foundry.&lt;/p&gt;

&lt;p&gt;The big picture : Use Spring Cloud Services design patterns to build cloud Native applications&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-1.png&#34; alt=&#34;Cloud Native Spring Application Architecture&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java SDK 1.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Git from &lt;a href=&#34;https://mac.github.com/&#34;&gt;github.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud Foundry CLI for &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;http://docs.cloudfoundry.org/devguide/installcf/install-go-cli.html#windows&#34;&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curl from &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pivotal Web Services Account.  Create a free trial account here &lt;a href=&#34;http://run.pivotal.io/&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maven for build (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In this workshop we are going to follow these steps to build our first Cloud Native Spring Boot app on Cloud foundry using the Spring Cloud Config Server.&lt;/p&gt;

&lt;p&gt;Learn how to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Set up a Git repository to hold configuration data
- Configure Spring Cloud Config server (config-server) on Pivotal Cloud Foundry with a Git backend
- Set up a client (greeting-config) to pull configuration from the config-server
- Use @ConfigurationProperties to capture configuration changes (greeting-config)
- Use @RefreshScope to capture configuration changes (greeting-config)
- Use Cloud Bus to notify applications (greeting-config) to refresh configuration at scale
- Config a Spring Cloud Service Registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Desired the architecture of this Cloud Native Spring boot app is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/spring-2.png&#34; alt=&#34;Config Server with Cloud Native Spring App&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;h5 id=&#34;get-the-greeting-config-app&#34;&gt;Get the greeting-config app&lt;/h5&gt;

&lt;p&gt;Clone the git repo which has a simple boilerplate Spring boot app built using Spring Initializer.&lt;/p&gt;

&lt;p&gt;The Spring Labs repo contains multiple apps, we are going to focus on greeting-config app in this exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/rjain-pivotal/pcf-workshop-spring-labs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;h5 id=&#34;login-into-pivotal-cloud-foundry&#34;&gt;Login into Pivotal Cloud Foundry&lt;/h5&gt;

&lt;p&gt;The students have userId&amp;rsquo;s (student1-student25) and the passwords will be distributed in the workshop.
Each student is assigned their own Organization (student1-org)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.pcf2.cloud.fe.pivotal.io --skip-ssl-validation
  Email: student1
  Password: ••••••••
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login to the App Console at &lt;a href=&#34;https://apps.pcf2.cloud.fe.pivotal.io&#34;&gt;https://apps.pcf2.cloud.fe.pivotal.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console.png&#34; alt=&#34;PCF App Console&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;

&lt;h5 id=&#34;set-the-config-data&#34;&gt;Set the config data&lt;/h5&gt;

&lt;p&gt;The greeting-config app uses the Spring Cloud Services Config Server to read config data.&lt;/p&gt;

&lt;p&gt;Fork the repo (&lt;a href=&#34;http://www.github.com/rjain-pivotal/workshop-app-config&#34;&gt;http://www.github.com/rjain-pivotal/workshop-app-config&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/config-server-fork.png&#34; alt=&#34;Fork&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;You can make changes to the application config files in the forked repo at &lt;a href=&#34;http://github.com/your-github-account/workshop-app-config&#34;&gt;http://github.com/your-github-account/workshop-app-config&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you want to make local changes and commit to the repo, then clone the git repo which has the config properties which are read by the greeting-config&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$git clone https://github.com/your-github-account/workshop-app-config.git
$cd workshop-app-config/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this repo you have the following config files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/git-1.png&#34; alt=&#34;Git Config Server Files&#34; style=&#34;width: 200px;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The config server serves the configuration request using the following path formats, where the application name is set in the application.yml for the client application, profile and label are set as environment variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/{application}/{profile}[/{label}]
/{application}-{profile}.yml
/{label}/{application}-{profile}.yml
/{application}-{profile}.properties
/{label}/{application}-{profile}.Properties
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details on the Config Server config files refer to the documentation (&lt;a href=&#34;http://docs.pivotal.io/spring-cloud-services/config-server/server.html&#34;&gt;http://docs.pivotal.io/spring-cloud-services/config-server/server.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;You could also have multiple branches in your Git repo, and in the Config Service instance, you can configure which branch to read the config information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;master
------
https://github.com/myorg/configurations
|- myapp.yml
|- myapp-development.yml
|- myapp-production.yml

tag v1.0.0
----------
https://github.com/myorg/configurations
|- myapp.yml
|- myapp-development.yml
|- myapp-production.yml

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4&#34;&gt;Step 4&lt;/h3&gt;

&lt;h5 id=&#34;configure-the-spring-cloud-config-service-instance-from-the-marketplace&#34;&gt;Configure the Spring Cloud Config Service Instance from the marketplace&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;In the PCF App Console, create a instance of the Config Server service from the marketplace.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-console-1.png&#34; alt=&#34;Marketplace Services&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the default plan.&lt;/li&gt;
&lt;li&gt;Name the service instance as &amp;lsquo;studentXX-config-service&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-config-service-1.png&#34; alt=&#34;Config Server&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This will create the studentXX-config-service service instance. Next configure this service by clicking manage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://loves.cfapps.io/images/pcf-config-service-2.png&#34; alt=&#34;Config Server&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The Git repository URL is the URL of your cloned git repo in Step 3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/rjain-pivotal//student1-workshop-app-config.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using defaults for the rest, hence leave them blank.
For detailed documentation on the other configuration items, refer to the product documentation.
&lt;a href=&#34;http://docs.pivotal.io/spring-cloud-services/config-server/creating-an-instance.html&#34;&gt;http://docs.pivotal.io/spring-cloud-services/config-server/creating-an-instance.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-5&#34;&gt;Step 5&lt;/h3&gt;

&lt;h5 id=&#34;code-walk-through-greeting-config&#34;&gt;Code walk through (greeting-config)&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the code in the greeting-config app in the source repo (Step #1) using your favorite editor (Atom/Sublime/Eclipse/IntelliJ/STS)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;greeting-service&lt;/p&gt;

&lt;p&gt;In GreetingProperties.java, @ConfigurationProperties annotation allows for reading of configuration values. Configuration keys are a combination of the prefix and the field names. In this case, there is one field (displayFortune). Therefore greeting.displayFortune is used to turn the display of fortunes on/off. Remaining code is typical getter/setters for the fields.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @ConfigurationProperties(prefix=&amp;quot;greeting&amp;quot;)
  public class GreetingProperties {

    private boolean displayFortune;

    public boolean isDisplayFortune() {
        return displayFortune;
    }

    public void setDisplayFortune(boolean displayFortune) {
        this.displayFortune = displayFortune;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;greetingProperties.isDisplayFortune() is used to turn the display of fortunes on/off. There are times when you want to turn features on/off on demand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @EnableConfigurationProperties(GreetingProperties.class)
  public class GreetingController {

    Logger logger = LoggerFactory
            .getLogger(GreetingController.class);


    @Autowired
    GreetingProperties greetingProperties;

    @Autowired
    FortuneService fortuneService;

    @RequestMapping(&amp;quot;/&amp;quot;)
    String getGreeting(Model model){

        logger.debug(&amp;quot;Adding greeting&amp;quot;);
        model.addAttribute(&amp;quot;msg&amp;quot;, &amp;quot;Greetings!!!&amp;quot;);

        if(greetingProperties.isDisplayFortune()){
            logger.debug(&amp;quot;Adding fortune&amp;quot;);
            model.addAttribute(&amp;quot;fortune&amp;quot;, fortuneService.getFortune());
        }

        //resolves to the greeting.vm velocity template
        return &amp;quot;greeting&amp;quot;;
    }

  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;quote-service&lt;/p&gt;

&lt;p&gt;QuoteService uses the @RefreshScope annotation. Beans with the @RefreshScope annotation will be recreated when refreshing configuration. The @Value annotation allows for injecting the value of the quoteServiceURL configuration parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @Service
  @RefreshScope
  public class QuoteService {
    Logger logger = LoggerFactory
            .getLogger(QuoteController.class);

    @Value(&amp;quot;${quoteServiceURL}&amp;quot;)
    private String quoteServiceURL;

    public String getQuoteServiceURI() {
        return quoteServiceURL;
    }

    public Quote getQuote(){
        logger.info(&amp;quot;quoteServiceURL: {}&amp;quot;, quoteServiceURL);
        RestTemplate restTemplate = new RestTemplate();
        Quote quote = restTemplate.getForObject(
                quoteServiceURL, Quote.class);
        return quote;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;greeting-config.yml&lt;/p&gt;

&lt;p&gt;In the app-config repo in the Github, review the greeting-config.yml file, which has the displayFortune turned on and the quoteService point to an existing URL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  security:
    basic:
      enabled: false

  management:
    security:
      enabled: false

  logging:
    level:
      io:
        pivotal: DEBUG

  greeting:
    displayFortune: true # &amp;lt;----Change to true

  quoteServiceURL: http://quote-service-dev.cfapps.io/quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-6&#34;&gt;Step 6&lt;/h3&gt;

&lt;h5 id=&#34;push-the-app&#34;&gt;Push the app&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change the manifest.yml file in the greeting-config/ to reflect the name of the app and the config-service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
applications:
- name: &amp;lt;studentXXX&amp;gt;-greeting-config
  memory: 512M
  buildpack: https://github.com/cloudfoundry/java-buildpack
  instances: 1
  host: &amp;lt;studentXXX&amp;gt;-greeting-config
  path: target/greeting-config-0.0.1-SNAPSHOT.jar
  services:
    - &amp;lt;studentXXX&amp;gt;-config-service
  env:
    SPRING_PROFILES_ACTIVE: dev
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app using maven&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the app using cf cli&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cf push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/
  http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/random-quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-7&#34;&gt;Step 7&lt;/h3&gt;

&lt;h5 id=&#34;change-the-property-and-curl-to-refreshscope&#34;&gt;Change the property and curl to RefreshScope&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the app-config repo, edit the greeting-config.yml file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  greeting:
    displayFortune: false # &amp;lt;----Change to true

  quoteServiceURL: http://quote-service-qa.cfapps.io/quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Force refresh the beans&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  curl -X POST http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/refresh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will output the properties which changed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [&amp;quot;quoteServiceURL&amp;quot;,&amp;quot;greeting.displayFortune&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open in the browser the App&lt;/p&gt;

&lt;p&gt;You will see the Greetings doesn&amp;rsquo;t have any fortune and the random-quote is from qa service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/
http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/random-quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-8&#34;&gt;Step 8&lt;/h3&gt;

&lt;h5 id=&#34;change-the-profile-and-push&#34;&gt;Change the profile and Push&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Next, update the manifest.yml to point to the SPRING_PROFILES_ACTIVE to qa&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
applications:
- name: &amp;lt;studentXXX&amp;gt;-greeting-config
  memory: 512M
  buildpack: https://github.com/cloudfoundry/java-buildpack
  instances: 1
  host: &amp;lt;studentXXX&amp;gt;-greeting-config
  path: target/greeting-config-0.0.1-SNAPSHOT.jar
  services:
    - &amp;lt;studentXXX&amp;gt;-config-service
  env:
    SPRING_PROFILES_ACTIVE: qa
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the app using cf cli&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cf push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now the properties will be served by app-config/greeting-config-qa.yml&lt;/p&gt;

&lt;p&gt;You can verify by opening the two URLs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/
http://student1-greeting-config.pcf2.cloud.fe.pivotal.io/random-quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-9&#34;&gt;Step 9&lt;/h3&gt;

&lt;h5 id=&#34;refreshing-application-configuration-at-scale-with-cloud-bus&#34;&gt;Refreshing Application Configuration at Scale with Cloud Bus&lt;/h5&gt;

&lt;p&gt;When running several instances of your application, this poses several problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Refreshing each individual instance is time consuming and too much overhead&lt;/li&gt;
&lt;li&gt;When running on Cloud Foundry you don’t have control over which instances you hit when sending the POST request due to load balancing provided by the router&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spring Cloud Bus addresses the issues listed above by providing a single endpoint to refresh all application instances via a pub/sub notification.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a RabbitMQ service instance, bind it to greeting-config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ cf create-service p-rabbitmq standard cloud-bus
  $ cf bind-service &amp;lt;studentXXX&amp;gt;-greeting-config cloud-bus
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the dependency to the pom.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-bus-amqp&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the app and push 3 app instances&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $mvn clean package
  $cf push -i 3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the app-config/greeting-config.yml and refresh all the app instances using Cloud Bus&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  curl -X POST http://&amp;lt;studentXXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/bus/refresh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify by opening the two URLs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://&amp;lt;studentXXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/
http://&amp;lt;studentXXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/random-quote
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-10&#34;&gt;Step 10&lt;/h3&gt;

&lt;h5 id=&#34;spring-actuator-endpoints&#34;&gt;Spring Actuator Endpoints&lt;/h5&gt;

&lt;p&gt;Check the Actuator Endpoints&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/beans&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumps all of the beans in the Spring context.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/autoconfig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumps all of the auto-configuration performed as part of application bootstrapping.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/configprops&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Displays a collated list of all @ConfigurationProperties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/env&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumps the application’s shell environment as well as all Java system properties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/mappings&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumps all URI request mappings and the controller methods to which they are mapped.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/dump&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Performs a thread dump.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;studentXX&amp;gt;-greeting-config.pcf2.cloud.fe.pivotal.io/trace&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 2: Run Docker Containers in Cloud Foundry</title>
      <link>http://loves.cfapps.io/2016/03/15/lab-2-run-docker-containers-in-cloud-foundry/</link>
      <pubDate>Tue, 15 Mar 2016 14:54:22 -0400</pubDate>
      
      <guid>http://loves.cfapps.io/2016/03/15/lab-2-run-docker-containers-in-cloud-foundry/</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;To deploy and configure a spring boot app in Docker container and run it in Cloud Foundry.&lt;/p&gt;

&lt;p&gt;This is the repo for a Spring Boot app in Docker
&lt;a href=&#34;https://spring.io/guides/gs/spring-boot-docker/#scratch&#34;&gt;Original Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Spring boot app is deployed in Cloud Foundry as a Docker Container&lt;/p&gt;

&lt;h3 id=&#34;5-steps&#34;&gt;5-Steps&lt;/h3&gt;

&lt;h4 id=&#34;clone-the-repo&#34;&gt;Clone the Repo&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;     git clone https://github.com/rjain-pivotal/spring-boot-docker-cf.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;build-it-and-run-it-locally&#34;&gt;Build it and Run it locally&lt;/h4&gt;

&lt;p&gt;If using Maven&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;     mvn package &amp;amp;&amp;amp; java -jar target/gs-spring-boot-docker-0.1.0.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If using Gradle&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     ./gradlew build &amp;amp;&amp;amp; java -jar build/libs/gs-spring-boot-docker-0.1.0.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;containerize-it&#34;&gt;Containerize it&lt;/h4&gt;

&lt;p&gt;If using Maven&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;      $ mvn package docker:build
      # Push the Image to Docker
      $ docker push &amp;lt;docker-user&amp;gt;/gs-spring-boot-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If using Gradle&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;      $ ./gradlew build buildDocker
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;check-and-run&#34;&gt;Check and Run&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;      $docker images
      # Get the Docker Machine VM IP if running on a MAC
      $docker-machine env default (Get the Machine IP)
      $docker run -p 8080:8080 -t rjain15/gs-spring-boot-docker
      $curl http://192.168.99.100:8080  (Use the Machine IP)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;run-it-in-cloud-foundry&#34;&gt;Run it in Cloud Foundry&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;      $cf push -o &amp;lt;docker-user&amp;gt;/gs-spring-boot-docker -c &amp;quot;java -Djava.security.egd=file:/dev/./urandom -jar /app.jar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>